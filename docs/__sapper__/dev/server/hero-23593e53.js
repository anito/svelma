'use strict';

var __chunk_1 = require('./chunk-7f071dbf.js');
require('./chunk-1959450c.js');
var __chunk_3 = require('./chunk-8c7fa0c8.js');
require('clipboard');
require('./chunk-14459e5a.js');
var __chunk_5 = require('./chunk-64148feb.js');

/* src/routes/bulma/hero.svelte generated by Svelte v3.16.7 */

const Hero = __chunk_1.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let type = "is-primary";

	return `${__chunk_1.validate_component(__chunk_3.DocHeader, "DocHeader").$$render($$result, { title: "Hero", subtitle: "Hero headers" }, {}, {})}

${__chunk_1.validate_component(__chunk_5.Example, "Example").$$render(
		$$result,
		{
			horizontal: true,
			code: `<script>
  import { fade } from 'svelte/transition'

  const types = ['is-primary', 'is-success', 'is-danger', 'is-warning', 'is-info', 'is-link']
  let type = 'is-primary'

  async function update() {
    type = ''

    setTimeout(() => {
      type = types[Math.floor(Math.random() * types.length)];
    }, 1000)
  }
</script>

<button class="button is-primary" on:click={update}>Update Hero</button>

<br />
<br />

{#if type}
  <section class="hero {type}" transition:slide>
    <div class="hero-body">
      <div class="container">
        <h1 class="title">
          Title
        </h1>
        <h2 class="subtitle">
          Subtitle
        </h2>
      </div>
    </div>
  </section>
{/if}`
		},
		{},
		{
			preview: () => `<div slot="${"preview"}">
    <button class="${"button is-primary"}">Update Hero</button>

    <br>
    <br>

    ${type
			? `<section class="${"hero " + __chunk_1.escape(type)}">
        <div class="${"hero-body"}">
          <div class="${"container"}">
            <h1 class="${"title"}">
              Title
            </h1>
            <h2 class="${"subtitle"}">
              Subtitle
            </h2>
          </div>
        </div>
      </section>`
			: ``}
  </div>`,
			default: () => `
  
`
		}
	)}`;
});

exports.default = Hero;
