import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, f as element, R as text, D as claim_component, H as claim_space, g as claim_element, h as children, S as claim_text, i as detach_dev, j as attr_dev, k as add_location, E as mount_component, n as insert_dev, o as append_dev, A as transition_in, y as transition_out, F as destroy_component, a as noop } from './chunk.0f951886.js';
import { p as Tabs, q as Tab } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';
import { a as JSDoc } from './chunk.472f5470.js';

/* src/routes/components/tabs.svelte generated by Svelte v3.16.7 */
const file = "src/routes/components/tabs.svelte";

// (41:6) <Tab label="Svelte">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Is cool");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Is cool");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(41:6) <Tab label=\\\"Svelte\\\">",
		ctx
	});

	return block;
}

// (44:6) <Tab label="Vue">
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Is good");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Is good");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(44:6) <Tab label=\\\"Vue\\\">",
		ctx
	});

	return block;
}

// (47:6) <Tab label="Angular">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("lol no");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "lol no");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(47:6) <Tab label=\\\"Angular\\\">",
		ctx
	});

	return block;
}

// (40:4) <Tabs>
function create_default_slot_13(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: {
				label: "Svelte",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const tab1 = new Tab({
			props: {
				label: "Vue",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const tab2 = new Tab({
			props: {
				label: "Angular",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tab0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tab0_changes.$$scope = { dirty, ctx };
			}

			tab0.$set(tab0_changes);
			const tab1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tab1_changes.$$scope = { dirty, ctx };
			}

			tab1.$set(tab1_changes);
			const tab2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tab2_changes.$$scope = { dirty, ctx };
			}

			tab2.$set(tab2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(40:4) <Tabs>",
		ctx
	});

	return block;
}

// (39:2) <div slot="preview">
function create_preview_slot_3(ctx) {
	let div;
	let current;

	const tabs = new Tabs({
			props: {
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(tabs.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(tabs.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 38, 2, 881);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(tabs, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tabs_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs_changes.$$scope = { dirty, ctx };
			}

			tabs.$set(tabs_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tabs.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tabs.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(tabs);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_3.name,
		type: "slot",
		source: "(39:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (24:0) <Example code={`<script>   import { Tabs, Tab } from 'svelma' </script>  <Tabs>   <Tab label="Svelte">     Is cool   </Tab>   <Tab label="Vue">     Is good   </Tab>   <Tab label="Angular">     lol no   </Tab> </Tabs>`}>
function create_default_slot_12(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(24:0) <Example code={`<script>   import { Tabs, Tab } from 'svelma' </script>  <Tabs>   <Tab label=\\\"Svelte\\\">     Is cool   </Tab>   <Tab label=\\\"Vue\\\">     Is good   </Tab>   <Tab label=\\\"Angular\\\">     lol no   </Tab> </Tabs>`}>",
		ctx
	});

	return block;
}

// (80:4) <Tabs>
function create_default_slot_11(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(80:4) <Tabs>",
		ctx
	});

	return block;
}

// (86:4) <Tabs size="is-medium">
function create_default_slot_10(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(86:4) <Tabs size=\\\"is-medium\\\">",
		ctx
	});

	return block;
}

// (92:4) <Tabs size="is-large">
function create_default_slot_9(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(92:4) <Tabs size=\\\"is-large\\\">",
		ctx
	});

	return block;
}

// (79:2) <div slot="preview">
function create_preview_slot_2(ctx) {
	let div;
	let t0;
	let t1;
	let current;

	const tabs0 = new Tabs({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const tabs1 = new Tabs({
			props: {
				size: "is-medium",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const tabs2 = new Tabs({
			props: {
				size: "is-large",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(tabs0.$$.fragment);
			t0 = space();
			create_component(tabs1.$$.fragment);
			t1 = space();
			create_component(tabs2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(tabs0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(tabs1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(tabs2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 78, 2, 1756);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(tabs0, div, null);
			append_dev(div, t0);
			mount_component(tabs1, div, null);
			append_dev(div, t1);
			mount_component(tabs2, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tabs0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs0_changes.$$scope = { dirty, ctx };
			}

			tabs0.$set(tabs0_changes);
			const tabs1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs1_changes.$$scope = { dirty, ctx };
			}

			tabs1.$set(tabs1_changes);
			const tabs2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs2_changes.$$scope = { dirty, ctx };
			}

			tabs2.$set(tabs2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tabs0.$$.fragment, local);
			transition_in(tabs1.$$.fragment, local);
			transition_in(tabs2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tabs0.$$.fragment, local);
			transition_out(tabs1.$$.fragment, local);
			transition_out(tabs2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(tabs0);
			destroy_component(tabs1);
			destroy_component(tabs2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_2.name,
		type: "slot",
		source: "(79:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (58:0) <Example code={`<script>   import { Tabs, Tab } from 'svelma' </script>  <Tabs>   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>  <Tabs size="is-medium">   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>  <Tabs size="is-large">   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>`}>
function create_default_slot_8(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(58:0) <Example code={`<script>   import { Tabs, Tab } from 'svelma' </script>  <Tabs>   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>  <Tabs size=\\\"is-medium\\\">   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>  <Tabs size=\\\"is-large\\\">   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>`}>",
		ctx
	});

	return block;
}

// (120:4) <Tabs position="is-centered">
function create_default_slot_7(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(120:4) <Tabs position=\\\"is-centered\\\">",
		ctx
	});

	return block;
}

// (126:4) <Tabs position="is-right">
function create_default_slot_6(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(126:4) <Tabs position=\\\"is-right\\\">",
		ctx
	});

	return block;
}

// (119:2) <div slot="preview">
function create_preview_slot_1(ctx) {
	let div;
	let t;
	let current;

	const tabs0 = new Tabs({
			props: {
				position: "is-centered",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const tabs1 = new Tabs({
			props: {
				position: "is-right",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(tabs0.$$.fragment);
			t = space();
			create_component(tabs1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(tabs0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(tabs1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 118, 2, 2850);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(tabs0, div, null);
			append_dev(div, t);
			mount_component(tabs1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tabs0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs0_changes.$$scope = { dirty, ctx };
			}

			tabs0.$set(tabs0_changes);
			const tabs1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs1_changes.$$scope = { dirty, ctx };
			}

			tabs1.$set(tabs1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tabs0.$$.fragment, local);
			transition_in(tabs1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tabs0.$$.fragment, local);
			transition_out(tabs1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(tabs0);
			destroy_component(tabs1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_1.name,
		type: "slot",
		source: "(119:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (104:0) <Example code={`<script>   import { Tabs, Tab } from 'svelma' </script>  <Tabs position="is-centered">   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>  <Tabs position="is-right">   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>`}>
function create_default_slot_5(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(104:0) <Example code={`<script>   import { Tabs, Tab } from 'svelma' </script>  <Tabs position=\\\"is-centered\\\">   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>  <Tabs position=\\\"is-right\\\">   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>`}>",
		ctx
	});

	return block;
}

// (171:4) <Tabs style="is-boxed">
function create_default_slot_4(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(171:4) <Tabs style=\\\"is-boxed\\\">",
		ctx
	});

	return block;
}

// (177:4) <Tabs style="is-toggle">
function create_default_slot_3(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(177:4) <Tabs style=\\\"is-toggle\\\">",
		ctx
	});

	return block;
}

// (183:4) <Tabs style="is-toggle is-toggle-rounded">
function create_default_slot_2(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(183:4) <Tabs style=\\\"is-toggle is-toggle-rounded\\\">",
		ctx
	});

	return block;
}

// (189:4) <Tabs style="is-fullwidth">
function create_default_slot_1(ctx) {
	let t0;
	let t1;
	let current;

	const tab0 = new Tab({
			props: { label: "People", icon: "users" },
			$$inline: true
		});

	const tab1 = new Tab({
			props: { label: "Places", icon: "map-marker-alt" },
			$$inline: true
		});

	const tab2 = new Tab({
			props: { label: "Things", icon: "ellipsis-h" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(tab0.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(tab1.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(tab2.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(tab0, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(tab2, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(tab2, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(189:4) <Tabs style=\\\"is-fullwidth\\\">",
		ctx
	});

	return block;
}

// (170:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let current;

	const tabs0 = new Tabs({
			props: {
				style: "is-boxed",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const tabs1 = new Tabs({
			props: {
				style: "is-toggle",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const tabs2 = new Tabs({
			props: {
				style: "is-toggle is-toggle-rounded",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const tabs3 = new Tabs({
			props: {
				style: "is-fullwidth",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(tabs0.$$.fragment);
			t0 = space();
			create_component(tabs1.$$.fragment);
			t1 = space();
			create_component(tabs2.$$.fragment);
			t2 = space();
			create_component(tabs3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(tabs0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(tabs1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(tabs2.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(tabs3.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 169, 2, 4337);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(tabs0, div, null);
			append_dev(div, t0);
			mount_component(tabs1, div, null);
			append_dev(div, t1);
			mount_component(tabs2, div, null);
			append_dev(div, t2);
			mount_component(tabs3, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const tabs0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs0_changes.$$scope = { dirty, ctx };
			}

			tabs0.$set(tabs0_changes);
			const tabs1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs1_changes.$$scope = { dirty, ctx };
			}

			tabs1.$set(tabs1_changes);
			const tabs2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs2_changes.$$scope = { dirty, ctx };
			}

			tabs2.$set(tabs2_changes);
			const tabs3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				tabs3_changes.$$scope = { dirty, ctx };
			}

			tabs3.$set(tabs3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tabs0.$$.fragment, local);
			transition_in(tabs1.$$.fragment, local);
			transition_in(tabs2.$$.fragment, local);
			transition_in(tabs3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tabs0.$$.fragment, local);
			transition_out(tabs1.$$.fragment, local);
			transition_out(tabs2.$$.fragment, local);
			transition_out(tabs3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(tabs0);
			destroy_component(tabs1);
			destroy_component(tabs2);
			destroy_component(tabs3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(170:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (143:0) <Example code={`<script>   import { Tabs, Tab } from 'svelma' </script>  <Tabs style="is-boxed">   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>  <Tabs style="is-toggle">   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>  <Tabs style="is-toggle is-toggle-rounded">   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>  <Tabs style="is-fullwidth">   <Tab label="People" icon="users"></Tab>   <Tab label="Places" icon="map-marker-alt"></Tab>   <Tab label="Things" icon="ellipsis-h"></Tab> </Tabs>`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(143:0) <Example code={`<script>   import { Tabs, Tab } from 'svelma' </script>  <Tabs style=\\\"is-boxed\\\">   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>  <Tabs style=\\\"is-toggle\\\">   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>  <Tabs style=\\\"is-toggle is-toggle-rounded\\\">   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>  <Tabs style=\\\"is-fullwidth\\\">   <Tab label=\\\"People\\\" icon=\\\"users\\\"></Tab>   <Tab label=\\\"Places\\\" icon=\\\"map-marker-alt\\\"></Tab>   <Tab label=\\\"Things\\\" icon=\\\"ellipsis-h\\\"></Tab> </Tabs>`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let t1;
	let hr0;
	let t2;
	let p0;
	let t3;
	let t4;
	let t5;
	let hr1;
	let t6;
	let p1;
	let t7;
	let t8;
	let t9;
	let hr2;
	let t10;
	let p2;
	let t11;
	let t12;
	let p3;
	let t13;
	let code0;
	let t14;
	let t15;
	let code1;
	let t16;
	let t17;
	let code2;
	let t18;
	let t19;
	let code3;
	let t20;
	let t21;
	let code4;
	let t22;
	let t23;
	let t24;
	let t25;
	let hr3;
	let t26;
	let h2;
	let t27;
	let t28;
	let h30;
	let t29;
	let t30;
	let t31;
	let br0;
	let t32;
	let br1;
	let t33;
	let h31;
	let t34;
	let t35;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Tabs",
				subtitle: "Horizontal navigation tabs"
			},
			$$inline: true
		});

	const example0 = new Example({
			props: {
				code: `<script>
  import { Tabs, Tab } from 'svelma'
</script>

<Tabs>
  <Tab label="Svelte">
    Is cool
  </Tab>
  <Tab label="Vue">
    Is good
  </Tab>
  <Tab label="Angular">
    lol no
  </Tab>
</Tabs>`,
				$$slots: {
					default: [create_default_slot_12],
					preview: [create_preview_slot_3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example1 = new Example({
			props: {
				code: `<script>
  import { Tabs, Tab } from 'svelma'
</script>

<Tabs>
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>

<Tabs size="is-medium">
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>

<Tabs size="is-large">
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>`,
				$$slots: {
					default: [create_default_slot_8],
					preview: [create_preview_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example2 = new Example({
			props: {
				code: `<script>
  import { Tabs, Tab } from 'svelma'
</script>

<Tabs position="is-centered">
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>

<Tabs position="is-right">
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>`,
				$$slots: {
					default: [create_default_slot_5],
					preview: [create_preview_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example3 = new Example({
			props: {
				code: `<script>
  import { Tabs, Tab } from 'svelma'
</script>

<Tabs style="is-boxed">
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>

<Tabs style="is-toggle">
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>

<Tabs style="is-toggle is-toggle-rounded">
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>

<Tabs style="is-fullwidth">
  <Tab label="People" icon="users"></Tab>
  <Tab label="Places" icon="map-marker-alt"></Tab>
  <Tab label="Things" icon="ellipsis-h"></Tab>
</Tabs>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const jsdoc0 = new JSDoc({
			props: {
				jsdoc: /*jsdocTabs*/ ctx[0],
				showHeader: false
			},
			$$inline: true
		});

	const jsdoc1 = new JSDoc({
			props: {
				jsdoc: /*jsdocTab*/ ctx[1],
				showHeader: false
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t0 = space();
			create_component(example0.$$.fragment);
			t1 = space();
			hr0 = element("hr");
			t2 = space();
			p0 = element("p");
			t3 = text("Icons and Sizes");
			t4 = space();
			create_component(example1.$$.fragment);
			t5 = space();
			hr1 = element("hr");
			t6 = space();
			p1 = element("p");
			t7 = text("Position");
			t8 = space();
			create_component(example2.$$.fragment);
			t9 = space();
			hr2 = element("hr");
			t10 = space();
			p2 = element("p");
			t11 = text("Style");
			t12 = space();
			p3 = element("p");
			t13 = text("Use ");
			code0 = element("code");
			t14 = text("is-boxed");
			t15 = text(", ");
			code1 = element("code");
			t16 = text("is-toggle");
			t17 = text(", ");
			code2 = element("code");
			t18 = text("is-toggle");
			t19 = text(" and ");
			code3 = element("code");
			t20 = text("is-toggle-rounded");
			t21 = text(", or\n  ");
			code4 = element("code");
			t22 = text("is-fullwidth");
			t23 = text(" to alter to style of your tabs.");
			t24 = space();
			create_component(example3.$$.fragment);
			t25 = space();
			hr3 = element("hr");
			t26 = space();
			h2 = element("h2");
			t27 = text("API");
			t28 = space();
			h30 = element("h3");
			t29 = text("Tabs");
			t30 = space();
			create_component(jsdoc0.$$.fragment);
			t31 = space();
			br0 = element("br");
			t32 = space();
			br1 = element("br");
			t33 = space();
			h31 = element("h3");
			t34 = text("Tab");
			t35 = space();
			create_component(jsdoc1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(example0.$$.fragment, nodes);
			t1 = claim_space(nodes);
			hr0 = claim_element(nodes, "HR", { class: true });
			t2 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "Icons and Sizes");
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(example1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			hr1 = claim_element(nodes, "HR", { class: true });
			t6 = claim_space(nodes);
			p1 = claim_element(nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t7 = claim_text(p1_nodes, "Position");
			p1_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			claim_component(example2.$$.fragment, nodes);
			t9 = claim_space(nodes);
			hr2 = claim_element(nodes, "HR", { class: true });
			t10 = claim_space(nodes);
			p2 = claim_element(nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t11 = claim_text(p2_nodes, "Style");
			p2_nodes.forEach(detach_dev);
			t12 = claim_space(nodes);
			p3 = claim_element(nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t13 = claim_text(p3_nodes, "Use ");
			code0 = claim_element(p3_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t14 = claim_text(code0_nodes, "is-boxed");
			code0_nodes.forEach(detach_dev);
			t15 = claim_text(p3_nodes, ", ");
			code1 = claim_element(p3_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t16 = claim_text(code1_nodes, "is-toggle");
			code1_nodes.forEach(detach_dev);
			t17 = claim_text(p3_nodes, ", ");
			code2 = claim_element(p3_nodes, "CODE", {});
			var code2_nodes = children(code2);
			t18 = claim_text(code2_nodes, "is-toggle");
			code2_nodes.forEach(detach_dev);
			t19 = claim_text(p3_nodes, " and ");
			code3 = claim_element(p3_nodes, "CODE", {});
			var code3_nodes = children(code3);
			t20 = claim_text(code3_nodes, "is-toggle-rounded");
			code3_nodes.forEach(detach_dev);
			t21 = claim_text(p3_nodes, ", or\n  ");
			code4 = claim_element(p3_nodes, "CODE", {});
			var code4_nodes = children(code4);
			t22 = claim_text(code4_nodes, "is-fullwidth");
			code4_nodes.forEach(detach_dev);
			t23 = claim_text(p3_nodes, " to alter to style of your tabs.");
			p3_nodes.forEach(detach_dev);
			t24 = claim_space(nodes);
			claim_component(example3.$$.fragment, nodes);
			t25 = claim_space(nodes);
			hr3 = claim_element(nodes, "HR", { class: true });
			t26 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t27 = claim_text(h2_nodes, "API");
			h2_nodes.forEach(detach_dev);
			t28 = claim_space(nodes);
			h30 = claim_element(nodes, "H3", { class: true });
			var h30_nodes = children(h30);
			t29 = claim_text(h30_nodes, "Tabs");
			h30_nodes.forEach(detach_dev);
			t30 = claim_space(nodes);
			claim_component(jsdoc0.$$.fragment, nodes);
			t31 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", {});
			t32 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t33 = claim_space(nodes);
			h31 = claim_element(nodes, "H3", { class: true });
			var h31_nodes = children(h31);
			t34 = claim_text(h31_nodes, "Tab");
			h31_nodes.forEach(detach_dev);
			t35 = claim_space(nodes);
			claim_component(jsdoc1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(hr0, "class", "is-medium");
			add_location(hr0, file, 53, 0, 1111);
			attr_dev(p0, "class", "title is-4");
			add_location(p0, file, 55, 0, 1135);
			attr_dev(hr1, "class", "is-medium");
			add_location(hr1, file, 99, 0, 2358);
			attr_dev(p1, "class", "title is-4");
			add_location(p1, file, 101, 0, 2382);
			attr_dev(hr2, "class", "is-medium");
			add_location(hr2, file, 133, 0, 3286);
			attr_dev(p2, "class", "title is-4");
			add_location(p2, file, 135, 0, 3310);
			add_location(code0, file, 138, 6, 3369);
			add_location(code1, file, 138, 29, 3392);
			add_location(code2, file, 138, 53, 3416);
			add_location(code3, file, 138, 80, 3443);
			add_location(code4, file, 139, 2, 3480);
			attr_dev(p3, "class", "content");
			add_location(p3, file, 137, 0, 3343);
			attr_dev(hr3, "class", "is-medium");
			add_location(hr3, file, 196, 0, 5174);
			attr_dev(h2, "class", "title is-4 is-spaced");
			add_location(h2, file, 198, 0, 5200);
			attr_dev(h30, "class", "subtitle");
			add_location(h30, file, 200, 0, 5243);
			add_location(br0, file, 204, 0, 5329);
			add_location(br1, file, 205, 0, 5334);
			attr_dev(h31, "class", "subtitle is-spaced");
			add_location(h31, file, 207, 0, 5340);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(example0, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, hr0, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t3);
			insert_dev(target, t4, anchor);
			mount_component(example1, target, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, hr1, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t7);
			insert_dev(target, t8, anchor);
			mount_component(example2, target, anchor);
			insert_dev(target, t9, anchor);
			insert_dev(target, hr2, anchor);
			insert_dev(target, t10, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t11);
			insert_dev(target, t12, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t13);
			append_dev(p3, code0);
			append_dev(code0, t14);
			append_dev(p3, t15);
			append_dev(p3, code1);
			append_dev(code1, t16);
			append_dev(p3, t17);
			append_dev(p3, code2);
			append_dev(code2, t18);
			append_dev(p3, t19);
			append_dev(p3, code3);
			append_dev(code3, t20);
			append_dev(p3, t21);
			append_dev(p3, code4);
			append_dev(code4, t22);
			append_dev(p3, t23);
			insert_dev(target, t24, anchor);
			mount_component(example3, target, anchor);
			insert_dev(target, t25, anchor);
			insert_dev(target, hr3, anchor);
			insert_dev(target, t26, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t27);
			insert_dev(target, t28, anchor);
			insert_dev(target, h30, anchor);
			append_dev(h30, t29);
			insert_dev(target, t30, anchor);
			mount_component(jsdoc0, target, anchor);
			insert_dev(target, t31, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t32, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t33, anchor);
			insert_dev(target, h31, anchor);
			append_dev(h31, t34);
			insert_dev(target, t35, anchor);
			mount_component(jsdoc1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				example0_changes.$$scope = { dirty, ctx };
			}

			example0.$set(example0_changes);
			const example1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				example1_changes.$$scope = { dirty, ctx };
			}

			example1.$set(example1_changes);
			const example2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				example2_changes.$$scope = { dirty, ctx };
			}

			example2.$set(example2_changes);
			const example3_changes = {};

			if (dirty & /*$$scope*/ 4) {
				example3_changes.$$scope = { dirty, ctx };
			}

			example3.$set(example3_changes);
			const jsdoc0_changes = {};
			if (dirty & /*jsdocTabs*/ 1) jsdoc0_changes.jsdoc = /*jsdocTabs*/ ctx[0];
			jsdoc0.$set(jsdoc0_changes);
			const jsdoc1_changes = {};
			if (dirty & /*jsdocTab*/ 2) jsdoc1_changes.jsdoc = /*jsdocTab*/ ctx[1];
			jsdoc1.$set(jsdoc1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example0.$$.fragment, local);
			transition_in(example1.$$.fragment, local);
			transition_in(example2.$$.fragment, local);
			transition_in(example3.$$.fragment, local);
			transition_in(jsdoc0.$$.fragment, local);
			transition_in(jsdoc1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example0.$$.fragment, local);
			transition_out(example1.$$.fragment, local);
			transition_out(example2.$$.fragment, local);
			transition_out(example3.$$.fragment, local);
			transition_out(jsdoc0.$$.fragment, local);
			transition_out(jsdoc1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(example0, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(hr0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t4);
			destroy_component(example1, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(hr1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t8);
			destroy_component(example2, detaching);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(hr2);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t24);
			destroy_component(example3, detaching);
			if (detaching) detach_dev(t25);
			if (detaching) detach_dev(hr3);
			if (detaching) detach_dev(t26);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t28);
			if (detaching) detach_dev(h30);
			if (detaching) detach_dev(t30);
			destroy_component(jsdoc0, detaching);
			if (detaching) detach_dev(t31);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t32);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t33);
			if (detaching) detach_dev(h31);
			if (detaching) detach_dev(t35);
			destroy_component(jsdoc1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const tabsRes = await this.fetch(`components/tabs.json`);
	const tabRes = await this.fetch(`components/tab.json`);
	const jsdocTabs = await tabsRes.json();
	const jsdocTab = await tabRes.json();
	return { jsdocTabs, jsdocTab };
}

function instance($$self, $$props, $$invalidate) {
	let { jsdocTabs } = $$props;
	let { jsdocTab } = $$props;
	const writable_props = ["jsdocTabs", "jsdocTab"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tabs> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("jsdocTabs" in $$props) $$invalidate(0, jsdocTabs = $$props.jsdocTabs);
		if ("jsdocTab" in $$props) $$invalidate(1, jsdocTab = $$props.jsdocTab);
	};

	$$self.$capture_state = () => {
		return { jsdocTabs, jsdocTab };
	};

	$$self.$inject_state = $$props => {
		if ("jsdocTabs" in $$props) $$invalidate(0, jsdocTabs = $$props.jsdocTabs);
		if ("jsdocTab" in $$props) $$invalidate(1, jsdocTab = $$props.jsdocTab);
	};

	return [jsdocTabs, jsdocTab];
}

class Tabs_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { jsdocTabs: 0, jsdocTab: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tabs_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*jsdocTabs*/ ctx[0] === undefined && !("jsdocTabs" in props)) {
			console.warn("<Tabs> was created without expected prop 'jsdocTabs'");
		}

		if (/*jsdocTab*/ ctx[1] === undefined && !("jsdocTab" in props)) {
			console.warn("<Tabs> was created without expected prop 'jsdocTab'");
		}
	}

	get jsdocTabs() {
		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsdocTabs(value) {
		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get jsdocTab() {
		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsdocTab(value) {
		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Tabs_1;
export { preload };
