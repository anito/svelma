import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, D as claim_component, H as claim_space, E as mount_component, n as insert_dev, A as transition_in, y as transition_out, F as destroy_component, i as detach_dev, f as element, g as claim_element, h as children, j as attr_dev, k as add_location, o as append_dev, a as noop } from './chunk.0f951886.js';
import { m as Field, n as Input } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';
import { a as JSDoc } from './chunk.472f5470.js';

/* src/routes/components/field.svelte generated by Svelte v3.16.7 */
const file = "src/routes/components/field.svelte";

// (35:4) <Field label="Name">
function create_default_slot_3(ctx) {
	let current;

	const input = new Input({
			props: { value: "Rich Harris" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(35:4) <Field label=\\\"Name\\\">",
		ctx
	});

	return block;
}

// (39:4) <Field label="Email" type="is-danger" message="Email is invalid">
function create_default_slot_2(ctx) {
	let current;

	const input = new Input({
			props: { value: "john@" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(39:4) <Field label=\\\"Email\\\" type=\\\"is-danger\\\" message=\\\"Email is invalid\\\">",
		ctx
	});

	return block;
}

// (43:4) <Field label="Username" type="is-success" message="Username is available">
function create_default_slot_1(ctx) {
	let current;

	const input = new Input({
			props: { value: "joey55" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(43:4) <Field label=\\\"Username\\\" type=\\\"is-success\\\" message=\\\"Username is available\\\">",
		ctx
	});

	return block;
}

// (34:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div;
	let t0;
	let t1;
	let current;

	const field0 = new Field({
			props: {
				label: "Name",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field1 = new Field({
			props: {
				label: "Email",
				type: "is-danger",
				message: "Email is invalid",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field2 = new Field({
			props: {
				label: "Username",
				type: "is-success",
				message: "Username is available",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(field0.$$.fragment);
			t0 = space();
			create_component(field1.$$.fragment);
			t1 = space();
			create_component(field2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(field0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(field1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(field2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 33, 2, 864);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(field0, div, null);
			append_dev(div, t0);
			mount_component(field1, div, null);
			append_dev(div, t1);
			mount_component(field2, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const field0_changes = {};

			if (dirty & /*$$scope*/ 4) {
				field0_changes.$$scope = { dirty, ctx };
			}

			field0.$set(field0_changes);
			const field1_changes = {};

			if (dirty & /*$$scope*/ 4) {
				field1_changes.$$scope = { dirty, ctx };
			}

			field1.$set(field1_changes);
			const field2_changes = {};

			if (dirty & /*$$scope*/ 4) {
				field2_changes.$$scope = { dirty, ctx };
			}

			field2.$set(field2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(field0.$$.fragment, local);
			transition_in(field1.$$.fragment, local);
			transition_in(field2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(field0.$$.fragment, local);
			transition_out(field1.$$.fragment, local);
			transition_out(field2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(field0);
			destroy_component(field1);
			destroy_component(field2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(34:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (23:0) <Example code={`<script>   import { Field, Input } from 'svelma' </script>  <Field label="Name">   <Input value="Rich Harris" /> </Field>  <Field label="Name" type="is-danger" message="Pick a better name">   <Input type="text" value="Moby Dick" /> </Field>`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(23:0) <Example code={`<script>   import { Field, Input } from 'svelma' </script>  <Field label=\\\"Name\\\">   <Input value=\\\"Rich Harris\\\" /> </Field>  <Field label=\\\"Name\\\" type=\\\"is-danger\\\" message=\\\"Pick a better name\\\">   <Input type=\\\"text\\\" value=\\\"Moby Dick\\\" /> </Field>`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let t1;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Field",
				subtitle: "Add functionality and styling to form elements/inputs by grouping components together"
			},
			$$inline: true
		});

	const example = new Example({
			props: {
				code: `<script>
  import { Field, Input } from 'svelma'
</script>

<Field label="Name">
  <Input value="Rich Harris" />
</Field>

<Field label="Name" type="is-danger" message="Pick a better name">
  <Input type="text" value="Moby Dick" />
</Field>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const jsdoc_1 = new JSDoc({
			props: { jsdoc: /*jsdoc*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t0 = space();
			create_component(example.$$.fragment);
			t1 = space();
			create_component(jsdoc_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(example.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(jsdoc_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(example, target, anchor);
			insert_dev(target, t1, anchor);
			mount_component(jsdoc_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example_changes = {};

			if (dirty & /*$$scope*/ 4) {
				example_changes.$$scope = { dirty, ctx };
			}

			example.$set(example_changes);
			const jsdoc_1_changes = {};
			if (dirty & /*jsdoc*/ 1) jsdoc_1_changes.jsdoc = /*jsdoc*/ ctx[0];
			jsdoc_1.$set(jsdoc_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example.$$.fragment, local);
			transition_in(jsdoc_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example.$$.fragment, local);
			transition_out(jsdoc_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(example, detaching);
			if (detaching) detach_dev(t1);
			destroy_component(jsdoc_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const res = await this.fetch(`components/field.json`);
	const jsdoc = await res.json();
	return { jsdoc };
}

function instance($$self, $$props, $$invalidate) {
	let name = "Moby Dick";
	let { jsdoc } = $$props;
	const writable_props = ["jsdoc"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Field> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
	};

	$$self.$capture_state = () => {
		return { name, jsdoc };
	};

	$$self.$inject_state = $$props => {
		if ("name" in $$props) name = $$props.name;
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
	};

	return [jsdoc];
}

class Field_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { jsdoc: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Field_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*jsdoc*/ ctx[0] === undefined && !("jsdoc" in props)) {
			console.warn("<Field> was created without expected prop 'jsdoc'");
		}
	}

	get jsdoc() {
		throw new Error("<Field>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsdoc(value) {
		throw new Error("<Field>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Field_1;
export { preload };
