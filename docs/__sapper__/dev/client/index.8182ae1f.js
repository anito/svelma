import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, f as element, G as space, R as text, C as create_component, g as claim_element, H as claim_space, h as children, S as claim_text, i as detach_dev, D as claim_component, j as attr_dev, k as add_location, o as append_dev, n as insert_dev, E as mount_component, A as transition_in, y as transition_out, F as destroy_component } from './chunk.0f951886.js';
import { c as Message } from './chunk.b9034416.js';

/* src/routes/index.svelte generated by Svelte v3.16.7 */
const file = "src/routes/index.svelte";

// (69:8) <Message title="Note!" type="is-primary" showClose={false}>
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("This library is a very early work-in-progress. Please forgive all broken and missing features and\n          documentation.");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "This library is a very early work-in-progress. Please forgive all broken and missing features and\n          documentation.");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(69:8) <Message title=\\\"Note!\\\" type=\\\"is-primary\\\" showClose={false}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let meta0;
	let meta1;
	let meta2;
	let t0;
	let div2;
	let div1;
	let div0;
	let h1;
	let t1;
	let t2;
	let h2;
	let t3;
	let t4;
	let pre;
	let code;
	let t5;
	let t6;
	let br0;
	let t7;
	let br1;
	let t8;
	let p;
	let current;

	const message = new Message({
			props: {
				title: "Note!",
				type: "is-primary",
				showClose: false,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			meta0 = element("meta");
			meta1 = element("meta");
			meta2 = element("meta");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t1 = text("Svelma");
			t2 = space();
			h2 = element("h2");
			t3 = text("Bulma components for Svelte");
			t4 = space();
			pre = element("pre");
			code = element("code");
			t5 = text("$ npm install svelma");
			t6 = space();
			br0 = element("br");
			t7 = space();
			br1 = element("br");
			t8 = space();
			p = element("p");
			create_component(message.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			meta0 = claim_element(nodes, "META", { property: true, content: true });
			meta1 = claim_element(nodes, "META", { property: true, content: true });
			meta2 = claim_element(nodes, "META", { property: true, content: true });
			t0 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Svelma");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, "Bulma components for Svelte");
			h2_nodes.forEach(detach_dev);
			t4 = claim_space(div0_nodes);
			pre = claim_element(div0_nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			code = claim_element(pre_nodes, "CODE", {});
			var code_nodes = children(code);
			t5 = claim_text(code_nodes, "$ npm install svelma");
			code_nodes.forEach(detach_dev);
			pre_nodes.forEach(detach_dev);
			t6 = claim_space(div0_nodes);
			br0 = claim_element(div0_nodes, "BR", {});
			t7 = claim_space(div0_nodes);
			br1 = claim_element(div0_nodes, "BR", {});
			t8 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			claim_component(message.$$.fragment, p_nodes);
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Svelma";
			attr_dev(meta0, "property", "og:type");
			attr_dev(meta0, "content", "website");
			add_location(meta0, file, 49, 2, 1813);
			attr_dev(meta1, "property", "og:title");
			attr_dev(meta1, "content", "Svelma");
			add_location(meta1, file, 50, 2, 1861);
			attr_dev(meta2, "property", "og:description");
			attr_dev(meta2, "content", "Bulma components for Svelte");
			add_location(meta2, file, 51, 2, 1909);
			attr_dev(h1, "class", "title svelte-16xcuqw");
			add_location(h1, file, 57, 6, 2110);
			attr_dev(h2, "class", "subtitle");
			add_location(h2, file, 58, 6, 2146);
			add_location(code, file, 61, 8, 2221);
			attr_dev(pre, "class", "svelte-16xcuqw");
			add_location(pre, file, 60, 6, 2207);
			add_location(br0, file, 64, 6, 2275);
			add_location(br1, file, 65, 6, 2288);
			attr_dev(p, "class", "svelte-16xcuqw");
			add_location(p, file, 67, 6, 2302);
			attr_dev(div0, "class", "container has-text-centered");
			add_location(div0, file, 56, 4, 2062);
			attr_dev(div1, "class", "hero-body");
			add_location(div1, file, 55, 2, 2034);
			attr_dev(div2, "class", "hero is-full-height");
			add_location(div2, file, 54, 0, 1998);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			append_dev(document.head, meta2);
			insert_dev(target, t0, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, t1);
			append_dev(div0, t2);
			append_dev(div0, h2);
			append_dev(h2, t3);
			append_dev(div0, t4);
			append_dev(div0, pre);
			append_dev(pre, code);
			append_dev(code, t5);
			append_dev(div0, t6);
			append_dev(div0, br0);
			append_dev(div0, t7);
			append_dev(div0, br1);
			append_dev(div0, t8);
			append_dev(div0, p);
			mount_component(message, p, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const message_changes = {};

			if (dirty & /*$$scope*/ 1) {
				message_changes.$$scope = { dirty, ctx };
			}

			message.$set(message_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(message.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(message.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta0);
			detach_dev(meta1);
			detach_dev(meta2);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div2);
			destroy_component(message);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Index",
			options,
			id: create_fragment.name
		});
	}
}

export default Index;
