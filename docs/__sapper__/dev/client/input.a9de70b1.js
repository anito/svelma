import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, f as element, R as text, D as claim_component, H as claim_space, g as claim_element, h as children, S as claim_text, i as detach_dev, k as add_location, j as attr_dev, E as mount_component, n as insert_dev, o as append_dev, A as transition_in, y as transition_out, F as destroy_component, a as noop, W as binding_callbacks, ae as bind, T as set_data_dev, af as add_flush_callback } from './chunk.0f951886.js';
import { n as Input, m as Field } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import { a as Codeview } from './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';
import { a as JSDoc } from './chunk.472f5470.js';

/* src/routes/components/input.svelte generated by Svelte v3.16.7 */
const file = "src/routes/components/input.svelte";

// (41:2) <div slot="preview">
function create_preview_slot_3(ctx) {
	let div;
	let current;

	const input = new Input({
			props: { type: "text", placeholder: "Text input" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(input.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(input.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 40, 2, 958);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(input, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(input);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_3.name,
		type: "slot",
		source: "(41:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (35:0) <Example code={`<script>   import { Input } from 'svelma' </script>  <Input type="text" placeholder="Text input" /> `}>
function create_default_slot_19(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(35:0) <Example code={`<script>   import { Input } from 'svelma' </script>  <Input type=\\\"text\\\" placeholder=\\\"Text input\\\" /> `}>",
		ctx
	});

	return block;
}

// (84:4) <Codeview lang="js" showCopy={false}>
function create_default_slot_18(ctx) {
	let t0;
	let t1_value = JSON.stringify(/*bound*/ ctx[1], null, 2) + "";
	let t1;

	const block = {
		c: function create() {
			t0 = text("// Bound values\n");
			t1 = text(t1_value);
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "// Bound values\n");
			t1 = claim_text(nodes, t1_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*bound*/ 2 && t1_value !== (t1_value = JSON.stringify(/*bound*/ ctx[1], null, 2) + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(84:4) <Codeview lang=\\\"js\\\" showCopy={false}>",
		ctx
	});

	return block;
}

// (91:4) <Field label="Name">
function create_default_slot_17(ctx) {
	let updating_value;
	let current;

	function input_value_binding(value) {
		/*input_value_binding*/ ctx[2].call(null, value);
	}

	let input_props = { type: "text", placeholder: "Text input" };

	if (/*bound*/ ctx[1].name !== void 0) {
		input_props.value = /*bound*/ ctx[1].name;
	}

	const input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, "value", input_value_binding));

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const input_changes = {};

			if (!updating_value && dirty & /*bound*/ 2) {
				updating_value = true;
				input_changes.value = /*bound*/ ctx[1].name;
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(91:4) <Field label=\\\"Name\\\">",
		ctx
	});

	return block;
}

// (95:4) <Field label="Email" type="is-danger" message="Invalid email">
function create_default_slot_16(ctx) {
	let updating_value;
	let current;

	function input_value_binding_1(value) {
		/*input_value_binding_1*/ ctx[3].call(null, value);
	}

	let input_props = { type: "email", maxlength: "30" };

	if (/*bound*/ ctx[1].email !== void 0) {
		input_props.value = /*bound*/ ctx[1].email;
	}

	const input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, "value", input_value_binding_1));

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const input_changes = {};

			if (!updating_value && dirty & /*bound*/ 2) {
				updating_value = true;
				input_changes.value = /*bound*/ ctx[1].email;
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(95:4) <Field label=\\\"Email\\\" type=\\\"is-danger\\\" message=\\\"Invalid email\\\">",
		ctx
	});

	return block;
}

// (99:4) <Field label="Username" type="is-success" message="Username available">
function create_default_slot_15(ctx) {
	let updating_value;
	let current;

	function input_value_binding_2(value) {
		/*input_value_binding_2*/ ctx[4].call(null, value);
	}

	let input_props = { type: "email" };

	if (/*bound*/ ctx[1].username !== void 0) {
		input_props.value = /*bound*/ ctx[1].username;
	}

	const input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, "value", input_value_binding_2));

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const input_changes = {};

			if (!updating_value && dirty & /*bound*/ 2) {
				updating_value = true;
				input_changes.value = /*bound*/ ctx[1].username;
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(99:4) <Field label=\\\"Username\\\" type=\\\"is-success\\\" message=\\\"Username available\\\">",
		ctx
	});

	return block;
}

// (103:4) <Field label="Password">
function create_default_slot_14(ctx) {
	let updating_value;
	let current;

	function input_value_binding_3(value) {
		/*input_value_binding_3*/ ctx[5].call(null, value);
	}

	let input_props = { type: "password", passwordReveal: true };

	if (/*bound*/ ctx[1].password !== void 0) {
		input_props.value = /*bound*/ ctx[1].password;
	}

	const input = new Input({ props: input_props, $$inline: true });
	binding_callbacks.push(() => bind(input, "value", input_value_binding_3));

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const input_changes = {};

			if (!updating_value && dirty & /*bound*/ 2) {
				updating_value = true;
				input_changes.value = /*bound*/ ctx[1].password;
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(103:4) <Field label=\\\"Password\\\">",
		ctx
	});

	return block;
}

// (107:4) <Field label="Textarea">
function create_default_slot_13(ctx) {
	let current;

	const input = new Input({
			props: { type: "textarea", maxlength: "200" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(107:4) <Field label=\\\"Textarea\\\">",
		ctx
	});

	return block;
}

// (83:2) <div slot="preview">
function create_preview_slot_2(ctx) {
	let div;
	let t0;
	let br;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let current;

	const codeview = new Codeview({
			props: {
				lang: "js",
				showCopy: false,
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field0 = new Field({
			props: {
				label: "Name",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field1 = new Field({
			props: {
				label: "Email",
				type: "is-danger",
				message: "Invalid email",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field2 = new Field({
			props: {
				label: "Username",
				type: "is-success",
				message: "Username available",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field3 = new Field({
			props: {
				label: "Password",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field4 = new Field({
			props: {
				label: "Textarea",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(codeview.$$.fragment);
			t0 = space();
			br = element("br");
			t1 = space();
			create_component(field0.$$.fragment);
			t2 = space();
			create_component(field1.$$.fragment);
			t3 = space();
			create_component(field2.$$.fragment);
			t4 = space();
			create_component(field3.$$.fragment);
			t5 = space();
			create_component(field4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(codeview.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			br = claim_element(div_nodes, "BR", {});
			t1 = claim_space(div_nodes);
			claim_component(field0.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(field1.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(field2.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(field3.$$.fragment, div_nodes);
			t5 = claim_space(div_nodes);
			claim_component(field4.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(br, file, 88, 4, 2119);
			attr_dev(div, "slot", "preview");
			add_location(div, file, 82, 2, 1986);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(codeview, div, null);
			append_dev(div, t0);
			append_dev(div, br);
			append_dev(div, t1);
			mount_component(field0, div, null);
			append_dev(div, t2);
			mount_component(field1, div, null);
			append_dev(div, t3);
			mount_component(field2, div, null);
			append_dev(div, t4);
			mount_component(field3, div, null);
			append_dev(div, t5);
			mount_component(field4, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const codeview_changes = {};

			if (dirty & /*$$scope, bound*/ 66) {
				codeview_changes.$$scope = { dirty, ctx };
			}

			codeview.$set(codeview_changes);
			const field0_changes = {};

			if (dirty & /*$$scope, bound*/ 66) {
				field0_changes.$$scope = { dirty, ctx };
			}

			field0.$set(field0_changes);
			const field1_changes = {};

			if (dirty & /*$$scope, bound*/ 66) {
				field1_changes.$$scope = { dirty, ctx };
			}

			field1.$set(field1_changes);
			const field2_changes = {};

			if (dirty & /*$$scope, bound*/ 66) {
				field2_changes.$$scope = { dirty, ctx };
			}

			field2.$set(field2_changes);
			const field3_changes = {};

			if (dirty & /*$$scope, bound*/ 66) {
				field3_changes.$$scope = { dirty, ctx };
			}

			field3.$set(field3_changes);
			const field4_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field4_changes.$$scope = { dirty, ctx };
			}

			field4.$set(field4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(codeview.$$.fragment, local);
			transition_in(field0.$$.fragment, local);
			transition_in(field1.$$.fragment, local);
			transition_in(field2.$$.fragment, local);
			transition_in(field3.$$.fragment, local);
			transition_in(field4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(codeview.$$.fragment, local);
			transition_out(field0.$$.fragment, local);
			transition_out(field1.$$.fragment, local);
			transition_out(field2.$$.fragment, local);
			transition_out(field3.$$.fragment, local);
			transition_out(field4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(codeview);
			destroy_component(field0);
			destroy_component(field1);
			destroy_component(field2);
			destroy_component(field3);
			destroy_component(field4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_2.name,
		type: "slot",
		source: "(83:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (52:0) <Example code={`<script>   import { Field, Input } from 'svelma'    let bound = {     name: 'Rich Harris',     email: 'rich@',     username: 'richie55',     password: 'secret123',   } </script>  <Field label="Name">   <Input type="text" bind:value={bound.name} placeholder="Text input" /> </Field>  <Field label="Email" type="is-danger" message="Invalid email">    <Input type="email" bind:value={bound.email} maxlength="30" /> </Field>  <Field label="Username" type="is-success" message="Username available">    <Input type="email" bind:value={bound.username} /> </Field>  <Field label="Password">    <Input type="password" bind:value={bound.password} passwordReveal={true} /> </Field>  <Field label="Textarea">    <Input type="textarea" maxlength="200" /> </Field> `}>
function create_default_slot_12(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(52:0) <Example code={`<script>   import { Field, Input } from 'svelma'    let bound = {     name: 'Rich Harris',     email: 'rich@',     username: 'richie55',     password: 'secret123',   } </script>  <Field label=\\\"Name\\\">   <Input type=\\\"text\\\" bind:value={bound.name} placeholder=\\\"Text input\\\" /> </Field>  <Field label=\\\"Email\\\" type=\\\"is-danger\\\" message=\\\"Invalid email\\\">    <Input type=\\\"email\\\" bind:value={bound.email} maxlength=\\\"30\\\" /> </Field>  <Field label=\\\"Username\\\" type=\\\"is-success\\\" message=\\\"Username available\\\">    <Input type=\\\"email\\\" bind:value={bound.username} /> </Field>  <Field label=\\\"Password\\\">    <Input type=\\\"password\\\" bind:value={bound.password} passwordReveal={true} /> </Field>  <Field label=\\\"Textarea\\\">    <Input type=\\\"textarea\\\" maxlength=\\\"200\\\" /> </Field> `}>",
		ctx
	});

	return block;
}

// (145:4) <Field>
function create_default_slot_11(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "No label" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(145:4) <Field>",
		ctx
	});

	return block;
}

// (149:4) <Field label="Rounded">
function create_default_slot_10(ctx) {
	let current;

	const input = new Input({
			props: {
				class: "is-rounded",
				placeholder: "Rounded"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(149:4) <Field label=\\\"Rounded\\\">",
		ctx
	});

	return block;
}

// (153:4) <Field label="Info" type="is-info">
function create_default_slot_9(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "Info" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(153:4) <Field label=\\\"Info\\\" type=\\\"is-info\\\">",
		ctx
	});

	return block;
}

// (157:4) <Field label="Warning" type="is-warning">
function create_default_slot_8(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "Warning" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(157:4) <Field label=\\\"Warning\\\" type=\\\"is-warning\\\">",
		ctx
	});

	return block;
}

// (161:4) <Field label="Disabled">
function create_default_slot_7(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "Disabled", disabled: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(161:4) <Field label=\\\"Disabled\\\">",
		ctx
	});

	return block;
}

// (165:4) <Field label="Loading">
function create_default_slot_6(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "Loading", loading: true },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(165:4) <Field label=\\\"Loading\\\">",
		ctx
	});

	return block;
}

// (144:2) <div slot="preview">
function create_preview_slot_1(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let current;

	const field0 = new Field({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field1 = new Field({
			props: {
				label: "Rounded",
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field2 = new Field({
			props: {
				label: "Info",
				type: "is-info",
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field3 = new Field({
			props: {
				label: "Warning",
				type: "is-warning",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field4 = new Field({
			props: {
				label: "Disabled",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field5 = new Field({
			props: {
				label: "Loading",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(field0.$$.fragment);
			t0 = space();
			create_component(field1.$$.fragment);
			t1 = space();
			create_component(field2.$$.fragment);
			t2 = space();
			create_component(field3.$$.fragment);
			t3 = space();
			create_component(field4.$$.fragment);
			t4 = space();
			create_component(field5.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(field0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(field1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(field2.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(field3.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(field4.$$.fragment, div_nodes);
			t4 = claim_space(div_nodes);
			claim_component(field5.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 143, 2, 3395);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(field0, div, null);
			append_dev(div, t0);
			mount_component(field1, div, null);
			append_dev(div, t1);
			mount_component(field2, div, null);
			append_dev(div, t2);
			mount_component(field3, div, null);
			append_dev(div, t3);
			mount_component(field4, div, null);
			append_dev(div, t4);
			mount_component(field5, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const field0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field0_changes.$$scope = { dirty, ctx };
			}

			field0.$set(field0_changes);
			const field1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field1_changes.$$scope = { dirty, ctx };
			}

			field1.$set(field1_changes);
			const field2_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field2_changes.$$scope = { dirty, ctx };
			}

			field2.$set(field2_changes);
			const field3_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field3_changes.$$scope = { dirty, ctx };
			}

			field3.$set(field3_changes);
			const field4_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field4_changes.$$scope = { dirty, ctx };
			}

			field4.$set(field4_changes);
			const field5_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field5_changes.$$scope = { dirty, ctx };
			}

			field5.$set(field5_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(field0.$$.fragment, local);
			transition_in(field1.$$.fragment, local);
			transition_in(field2.$$.fragment, local);
			transition_in(field3.$$.fragment, local);
			transition_in(field4.$$.fragment, local);
			transition_in(field5.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(field0.$$.fragment, local);
			transition_out(field1.$$.fragment, local);
			transition_out(field2.$$.fragment, local);
			transition_out(field3.$$.fragment, local);
			transition_out(field4.$$.fragment, local);
			transition_out(field5.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(field0);
			destroy_component(field1);
			destroy_component(field2);
			destroy_component(field3);
			destroy_component(field4);
			destroy_component(field5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_1.name,
		type: "slot",
		source: "(144:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (117:0) <Example code={`<script>   import { Field, Input } from 'svelma' </script>  <Field>   <Input placeholder="No label" /> </Field>  <Field label="Rounded">   <Input class="is-rounded" placeholder="Rounded" /> </Field>  <Field label="Info" type="is-info">    <Input placeholder="Info" /> </Field>  <Field label="Warning" type="is-warning">    <Input placeholder="Warning" /> </Field>  <Field label="Disabled">    <Input placeholder="Disabled" disabled /> </Field>  <Field label="Loading">   <Input placeholder="Loading" loading /> </Field>`}>
function create_default_slot_5(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(117:0) <Example code={`<script>   import { Field, Input } from 'svelma' </script>  <Field>   <Input placeholder=\\\"No label\\\" /> </Field>  <Field label=\\\"Rounded\\\">   <Input class=\\\"is-rounded\\\" placeholder=\\\"Rounded\\\" /> </Field>  <Field label=\\\"Info\\\" type=\\\"is-info\\\">    <Input placeholder=\\\"Info\\\" /> </Field>  <Field label=\\\"Warning\\\" type=\\\"is-warning\\\">    <Input placeholder=\\\"Warning\\\" /> </Field>  <Field label=\\\"Disabled\\\">    <Input placeholder=\\\"Disabled\\\" disabled /> </Field>  <Field label=\\\"Loading\\\">   <Input placeholder=\\\"Loading\\\" loading /> </Field>`}>",
		ctx
	});

	return block;
}

// (195:4) <Field>
function create_default_slot_4(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "Small", size: "is-small" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(195:4) <Field>",
		ctx
	});

	return block;
}

// (199:4) <Field>
function create_default_slot_3(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "Default" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(199:4) <Field>",
		ctx
	});

	return block;
}

// (203:4) <Field>
function create_default_slot_2(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "Medium", size: "is-medium" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(203:4) <Field>",
		ctx
	});

	return block;
}

// (207:4) <Field>
function create_default_slot_1(ctx) {
	let current;

	const input = new Input({
			props: { placeholder: "Large", size: "is-large" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(input.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(input.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(input, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(207:4) <Field>",
		ctx
	});

	return block;
}

// (194:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let current;

	const field0 = new Field({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field1 = new Field({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field2 = new Field({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const field3 = new Field({
			props: {
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(field0.$$.fragment);
			t0 = space();
			create_component(field1.$$.fragment);
			t1 = space();
			create_component(field2.$$.fragment);
			t2 = space();
			create_component(field3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(field0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(field1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(field2.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(field3.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 193, 2, 4358);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(field0, div, null);
			append_dev(div, t0);
			mount_component(field1, div, null);
			append_dev(div, t1);
			mount_component(field2, div, null);
			append_dev(div, t2);
			mount_component(field3, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const field0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field0_changes.$$scope = { dirty, ctx };
			}

			field0.$set(field0_changes);
			const field1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field1_changes.$$scope = { dirty, ctx };
			}

			field1.$set(field1_changes);
			const field2_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field2_changes.$$scope = { dirty, ctx };
			}

			field2.$set(field2_changes);
			const field3_changes = {};

			if (dirty & /*$$scope*/ 64) {
				field3_changes.$$scope = { dirty, ctx };
			}

			field3.$set(field3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(field0.$$.fragment, local);
			transition_in(field1.$$.fragment, local);
			transition_in(field2.$$.fragment, local);
			transition_in(field3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(field0.$$.fragment, local);
			transition_out(field1.$$.fragment, local);
			transition_out(field2.$$.fragment, local);
			transition_out(field3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(field0);
			destroy_component(field1);
			destroy_component(field2);
			destroy_component(field3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(194:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (175:0) <Example code={`<script>   import { Field, Input } from 'svelma' </script>  <Field>   <Input placeholder="Small" size="is-small" /> </Field>  <Field>   <Input placeholder="Default" /> </Field>  <Field>   <Input placeholder="Medium" size="is-medium" /> </Field>  <Field>   <Input placeholder="Large" size="is-large" /> </Field>`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(175:0) <Example code={`<script>   import { Field, Input } from 'svelma' </script>  <Field>   <Input placeholder=\\\"Small\\\" size=\\\"is-small\\\" /> </Field>  <Field>   <Input placeholder=\\\"Default\\\" /> </Field>  <Field>   <Input placeholder=\\\"Medium\\\" size=\\\"is-medium\\\" /> </Field>  <Field>   <Input placeholder=\\\"Large\\\" size=\\\"is-large\\\" /> </Field>`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let p0;
	let t1;
	let code0;
	let t2_value = `<input>` + "";
	let t2;
	let t3;
	let code1;
	let t4_value = `<textarea>` + "";
	let t4;
	let t5;
	let t6;
	let br0;
	let t7;
	let t8;
	let br1;
	let t9;
	let p1;
	let t10;
	let t11;
	let p2;
	let t12;
	let a;
	let strong;
	let t13;
	let t14;
	let t15;
	let t16;
	let hr0;
	let t17;
	let p3;
	let t18;
	let t19;
	let t20;
	let hr1;
	let t21;
	let p4;
	let t22;
	let t23;
	let t24;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Input",
				subtitle: "User input controls"
			},
			$$inline: true
		});

	const example0 = new Example({
			props: {
				code: `<script>
  import { Input } from 'svelma'
</script>

<Input type="text" placeholder="Text input" />
`,
				$$slots: {
					default: [create_default_slot_19],
					preview: [create_preview_slot_3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example1 = new Example({
			props: {
				code: `<script>
  import { Field, Input } from 'svelma'

  let bound = {
    name: 'Rich Harris',
    email: 'rich@',
    username: 'richie55',
    password: 'secret123',
  }
</script>

<Field label="Name">
  <Input type="text" bind:value={bound.name} placeholder="Text input" />
</Field>

<Field label="Email" type="is-danger" message="Invalid email"> 
  <Input type="email" bind:value={bound.email} maxlength="30" />
</Field>

<Field label="Username" type="is-success" message="Username available"> 
  <Input type="email" bind:value={bound.username} />
</Field>

<Field label="Password"> 
  <Input type="password" bind:value={bound.password} passwordReveal={true} />
</Field>

<Field label="Textarea"> 
  <Input type="textarea" maxlength="200" />
</Field>
`,
				$$slots: {
					default: [create_default_slot_12],
					preview: [create_preview_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example2 = new Example({
			props: {
				code: `<script>
  import { Field, Input } from 'svelma'
</script>

<Field>
  <Input placeholder="No label" />
</Field>

<Field label="Rounded">
  <Input class="is-rounded" placeholder="Rounded" />
</Field>

<Field label="Info" type="is-info"> 
  <Input placeholder="Info" />
</Field>

<Field label="Warning" type="is-warning"> 
  <Input placeholder="Warning" />
</Field>

<Field label="Disabled"> 
  <Input placeholder="Disabled" disabled />
</Field>

<Field label="Loading">
  <Input placeholder="Loading" loading />
</Field>`,
				$$slots: {
					default: [create_default_slot_5],
					preview: [create_preview_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example3 = new Example({
			props: {
				code: `<script>
  import { Field, Input } from 'svelma'
</script>

<Field>
  <Input placeholder="Small" size="is-small" />
</Field>

<Field>
  <Input placeholder="Default" />
</Field>

<Field>
  <Input placeholder="Medium" size="is-medium" />
</Field>

<Field>
  <Input placeholder="Large" size="is-large" />
</Field>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const jsdoc_1 = new JSDoc({
			props: { jsdoc: /*jsdoc*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t0 = space();
			p0 = element("p");
			t1 = text("Mostly just wraps ");
			code0 = element("code");
			t2 = text(t2_value);
			t3 = text("  and ");
			code1 = element("code");
			t4 = text(t4_value);
			t5 = text(" so additional Bulma features can be bound easily.");
			t6 = space();
			br0 = element("br");
			t7 = space();
			create_component(example0.$$.fragment);
			t8 = space();
			br1 = element("br");
			t9 = space();
			p1 = element("p");
			t10 = text("Types and colors");
			t11 = space();
			p2 = element("p");
			t12 = text("Wrap with ");
			a = element("a");
			strong = element("strong");
			t13 = text("Field");
			t14 = text(" for additional features");
			t15 = space();
			create_component(example1.$$.fragment);
			t16 = space();
			hr0 = element("hr");
			t17 = space();
			p3 = element("p");
			t18 = text("States, plus more styles");
			t19 = space();
			create_component(example2.$$.fragment);
			t20 = space();
			hr1 = element("hr");
			t21 = space();
			p4 = element("p");
			t22 = text("Sizes");
			t23 = space();
			create_component(example3.$$.fragment);
			t24 = space();
			create_component(jsdoc_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "Mostly just wraps ");
			code0 = claim_element(p0_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t2 = claim_text(code0_nodes, t2_value);
			code0_nodes.forEach(detach_dev);
			t3 = claim_text(p0_nodes, "  and ");
			code1 = claim_element(p0_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t4 = claim_text(code1_nodes, t4_value);
			code1_nodes.forEach(detach_dev);
			t5 = claim_text(p0_nodes, " so additional Bulma features can be bound easily.");
			p0_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			br0 = claim_element(nodes, "BR", {});
			t7 = claim_space(nodes);
			claim_component(example0.$$.fragment, nodes);
			t8 = claim_space(nodes);
			br1 = claim_element(nodes, "BR", {});
			t9 = claim_space(nodes);
			p1 = claim_element(nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t10 = claim_text(p1_nodes, "Types and colors");
			p1_nodes.forEach(detach_dev);
			t11 = claim_space(nodes);
			p2 = claim_element(nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t12 = claim_text(p2_nodes, "Wrap with ");
			a = claim_element(p2_nodes, "A", { href: true });
			var a_nodes = children(a);
			strong = claim_element(a_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t13 = claim_text(strong_nodes, "Field");
			strong_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t14 = claim_text(p2_nodes, " for additional features");
			p2_nodes.forEach(detach_dev);
			t15 = claim_space(nodes);
			claim_component(example1.$$.fragment, nodes);
			t16 = claim_space(nodes);
			hr0 = claim_element(nodes, "HR", { class: true });
			t17 = claim_space(nodes);
			p3 = claim_element(nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t18 = claim_text(p3_nodes, "States, plus more styles");
			p3_nodes.forEach(detach_dev);
			t19 = claim_space(nodes);
			claim_component(example2.$$.fragment, nodes);
			t20 = claim_space(nodes);
			hr1 = claim_element(nodes, "HR", { class: true });
			t21 = claim_space(nodes);
			p4 = claim_element(nodes, "P", { class: true });
			var p4_nodes = children(p4);
			t22 = claim_text(p4_nodes, "Sizes");
			p4_nodes.forEach(detach_dev);
			t23 = claim_space(nodes);
			claim_component(example3.$$.fragment, nodes);
			t24 = claim_space(nodes);
			claim_component(jsdoc_1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			add_location(code0, file, 29, 20, 716);
			add_location(code1, file, 29, 50, 746);
			attr_dev(p0, "class", "content");
			add_location(p0, file, 28, 0, 676);
			add_location(br0, file, 32, 0, 830);
			add_location(br1, file, 45, 0, 1051);
			attr_dev(p1, "class", "title is-4");
			add_location(p1, file, 47, 0, 1057);
			add_location(strong, file, 49, 56, 1157);
			attr_dev(a, "href", "components/field");
			add_location(a, file, 49, 29, 1130);
			attr_dev(p2, "class", "content");
			add_location(p2, file, 49, 0, 1101);
			attr_dev(hr0, "class", "is-medium");
			add_location(hr0, file, 112, 0, 2778);
			attr_dev(p3, "class", "title is-4");
			add_location(p3, file, 114, 0, 2802);
			attr_dev(hr1, "class", "is-medium");
			add_location(hr1, file, 170, 0, 3969);
			attr_dev(p4, "class", "title is-4");
			add_location(p4, file, 172, 0, 3993);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t1);
			append_dev(p0, code0);
			append_dev(code0, t2);
			append_dev(p0, t3);
			append_dev(p0, code1);
			append_dev(code1, t4);
			append_dev(p0, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, br0, anchor);
			insert_dev(target, t7, anchor);
			mount_component(example0, target, anchor);
			insert_dev(target, t8, anchor);
			insert_dev(target, br1, anchor);
			insert_dev(target, t9, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t10);
			insert_dev(target, t11, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t12);
			append_dev(p2, a);
			append_dev(a, strong);
			append_dev(strong, t13);
			append_dev(p2, t14);
			insert_dev(target, t15, anchor);
			mount_component(example1, target, anchor);
			insert_dev(target, t16, anchor);
			insert_dev(target, hr0, anchor);
			insert_dev(target, t17, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t18);
			insert_dev(target, t19, anchor);
			mount_component(example2, target, anchor);
			insert_dev(target, t20, anchor);
			insert_dev(target, hr1, anchor);
			insert_dev(target, t21, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t22);
			insert_dev(target, t23, anchor);
			mount_component(example3, target, anchor);
			insert_dev(target, t24, anchor);
			mount_component(jsdoc_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				example0_changes.$$scope = { dirty, ctx };
			}

			example0.$set(example0_changes);
			const example1_changes = {};

			if (dirty & /*$$scope, bound*/ 66) {
				example1_changes.$$scope = { dirty, ctx };
			}

			example1.$set(example1_changes);
			const example2_changes = {};

			if (dirty & /*$$scope*/ 64) {
				example2_changes.$$scope = { dirty, ctx };
			}

			example2.$set(example2_changes);
			const example3_changes = {};

			if (dirty & /*$$scope*/ 64) {
				example3_changes.$$scope = { dirty, ctx };
			}

			example3.$set(example3_changes);
			const jsdoc_1_changes = {};
			if (dirty & /*jsdoc*/ 1) jsdoc_1_changes.jsdoc = /*jsdoc*/ ctx[0];
			jsdoc_1.$set(jsdoc_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example0.$$.fragment, local);
			transition_in(example1.$$.fragment, local);
			transition_in(example2.$$.fragment, local);
			transition_in(example3.$$.fragment, local);
			transition_in(jsdoc_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example0.$$.fragment, local);
			transition_out(example1.$$.fragment, local);
			transition_out(example2.$$.fragment, local);
			transition_out(example3.$$.fragment, local);
			transition_out(jsdoc_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(br0);
			if (detaching) detach_dev(t7);
			destroy_component(example0, detaching);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(br1);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t11);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t15);
			destroy_component(example1, detaching);
			if (detaching) detach_dev(t16);
			if (detaching) detach_dev(hr0);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t19);
			destroy_component(example2, detaching);
			if (detaching) detach_dev(t20);
			if (detaching) detach_dev(hr1);
			if (detaching) detach_dev(t21);
			if (detaching) detach_dev(p4);
			if (detaching) detach_dev(t23);
			destroy_component(example3, detaching);
			if (detaching) detach_dev(t24);
			destroy_component(jsdoc_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const res = await this.fetch(`components/input.json`);
	const jsdoc = await res.json();
	return { jsdoc };
}

function instance($$self, $$props, $$invalidate) {
	let { jsdoc } = $$props;

	let bound = {
		name: "Rich Harris",
		email: "rich@",
		username: "richie55",
		password: "secret123"
	};

	const writable_props = ["jsdoc"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Input> was created with unknown prop '${key}'`);
	});

	function input_value_binding(value) {
		bound.name = value;
		$$invalidate(1, bound);
	}

	function input_value_binding_1(value) {
		bound.email = value;
		$$invalidate(1, bound);
	}

	function input_value_binding_2(value) {
		bound.username = value;
		$$invalidate(1, bound);
	}

	function input_value_binding_3(value) {
		bound.password = value;
		$$invalidate(1, bound);
	}

	$$self.$set = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
	};

	$$self.$capture_state = () => {
		return { jsdoc, bound };
	};

	$$self.$inject_state = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
		if ("bound" in $$props) $$invalidate(1, bound = $$props.bound);
	};

	return [
		jsdoc,
		bound,
		input_value_binding,
		input_value_binding_1,
		input_value_binding_2,
		input_value_binding_3
	];
}

class Input_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { jsdoc: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Input_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*jsdoc*/ ctx[0] === undefined && !("jsdoc" in props)) {
			console.warn("<Input> was created without expected prop 'jsdoc'");
		}
	}

	get jsdoc() {
		throw new Error("<Input>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsdoc(value) {
		throw new Error("<Input>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Input_1;
export { preload };
