import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, f as element, R as text, D as claim_component, H as claim_space, g as claim_element, h as children, S as claim_text, i as detach_dev, j as attr_dev, k as add_location, E as mount_component, n as insert_dev, o as append_dev, a as noop, A as transition_in, y as transition_out, F as destroy_component } from './chunk.0f951886.js';
import { a as DocHeader } from './chunk.45862366.js';

/* src/routes/bulma/intro.svelte generated by Svelte v3.16.7 */
const file = "src/routes/bulma/intro.svelte";

function create_fragment(ctx) {
	let t0;
	let p;
	let t1;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Bulma Elements",
				subtitle: "Using regular Bulma elements with Svelte"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t0 = space();
			p = element("p");
			t1 = text("Many Bulma components are easy to use with regular Svelte code, without needing an additional layer of a Svelma component. The docs in this section go over how to use\n  some of these elements in Svelte.");
			this.h();
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t1 = claim_text(p_nodes, "Many Bulma components are easy to use with regular Svelte code, without needing an additional layer of a Svelma component. The docs in this section go over how to use\n  some of these elements in Svelte.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "content");
			add_location(p, file, 6, 0, 170);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t1);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

class Intro extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Intro",
			options,
			id: create_fragment.name
		});
	}
}

export default Intro;
