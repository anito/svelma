import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, D as claim_component, H as claim_space, E as mount_component, n as insert_dev, A as transition_in, y as transition_out, F as destroy_component, i as detach_dev, W as binding_callbacks, ae as bind, f as element, g as claim_element, h as children, j as attr_dev, k as add_location, o as append_dev, af as add_flush_callback, a as noop, R as text, S as claim_text } from './chunk.0f951886.js';
import { d as Button, o as Modal } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';

/* src/routes/components/modal.svelte generated by Svelte v3.16.7 */
const file = "src/routes/components/modal.svelte";

// (24:4) <Button class="block" on:click={() => active = !active}>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toggle");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toggle");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(24:4) <Button class=\\\"block\\\" on:click={() => active = !active}>",
		ctx
	});

	return block;
}

// (25:4) <Modal bind:active={active}>
function create_default_slot_1(ctx) {
	let p;
	let img;
	let img_src_value;

	const block = {
		c: function create() {
			p = element("p");
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			img = claim_element(p_nodes, "IMG", { alt: true, src: true });
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", "Test image");
			if (img.src !== (img_src_value = "https://via.placeholder.com/1280x920")) attr_dev(img, "src", img_src_value);
			add_location(img, file, 26, 8, 744);
			attr_dev(p, "class", "image is-4by3");
			add_location(p, file, 25, 6, 710);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, img);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(25:4) <Modal bind:active={active}>",
		ctx
	});

	return block;
}

// (23:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div;
	let t;
	let updating_active;
	let current;

	const button = new Button({
			props: {
				class: "block",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[1]);

	function modal_active_binding(value) {
		/*modal_active_binding*/ ctx[2].call(null, value);
	}

	let modal_props = {
		$$slots: { default: [create_default_slot_1] },
		$$scope: { ctx }
	};

	if (/*active*/ ctx[0] !== void 0) {
		modal_props.active = /*active*/ ctx[0];
	}

	const modal = new Modal({ props: modal_props, $$inline: true });
	binding_callbacks.push(() => bind(modal, "active", modal_active_binding));

	const block = {
		c: function create() {
			div = element("div");
			create_component(button.$$.fragment);
			t = space();
			create_component(modal.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(button.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(modal.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 22, 2, 574);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			append_dev(div, t);
			mount_component(modal, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const modal_changes = {};

			if (dirty & /*$$scope*/ 8) {
				modal_changes.$$scope = { dirty, ctx };
			}

			if (!updating_active && dirty & /*active*/ 1) {
				updating_active = true;
				modal_changes.active = /*active*/ ctx[0];
				add_flush_callback(() => updating_active = false);
			}

			modal.$set(modal_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
			destroy_component(modal);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(23:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (11:0) <Example code={`<script>   import { Button, Modal } from 'svelma'      let active = false </script>  <Button class="block" on:click={() => active = !active}>Toggle</Button> <Modal bind:active={active}>   <p class="image is-4by3">     <img alt="Test image" src="https://via.placeholder.com/1280x920"/>   </p> </Modal>`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(11:0) <Example code={`<script>   import { Button, Modal } from 'svelma'      let active = false </script>  <Button class=\\\"block\\\" on:click={() => active = !active}>Toggle</Button> <Modal bind:active={active}>   <p class=\\\"image is-4by3\\\">     <img alt=\\\"Test image\\\" src=\\\"https://via.placeholder.com/1280x920\\\"/>   </p> </Modal>`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let current;

	const docheader = new DocHeader({
			props: { title: "Modal", subtitle: "Modal popups" },
			$$inline: true
		});

	const example = new Example({
			props: {
				code: `<script>
  import { Button, Modal } from 'svelma'
  
  let active = false
</script>

<Button class="block" on:click={() => active = !active}>Toggle</Button>
<Modal bind:active={active}>
  <p class="image is-4by3">
    <img alt="Test image" src="https://via.placeholder.com/1280x920"/>
  </p>
</Modal>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t = space();
			create_component(example.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(example.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(example, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example_changes = {};

			if (dirty & /*$$scope, active*/ 9) {
				example_changes.$$scope = { dirty, ctx };
			}

			example.$set(example_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t);
			destroy_component(example, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let active = false;
	const click_handler = () => $$invalidate(0, active = !active);

	function modal_active_binding(value) {
		active = value;
		$$invalidate(0, active);
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("active" in $$props) $$invalidate(0, active = $$props.active);
	};

	return [active, click_handler, modal_active_binding];
}

class Modal_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Modal_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Modal_1;
