import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, D as claim_component, H as claim_space, E as mount_component, n as insert_dev, A as transition_in, y as transition_out, F as destroy_component, i as detach_dev, f as element, R as text, g as claim_element, h as children, S as claim_text, j as attr_dev, k as add_location, o as append_dev, M as add_render_callback, N as create_bidirectional_transition, m as listen_dev, x as group_outros, z as check_outros, a as noop } from './chunk.0f951886.js';
import { s as slide } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';

/* src/routes/bulma/hero.svelte generated by Svelte v3.16.7 */
const file = "src/routes/bulma/hero.svelte";

// (62:4) {#if type}
function create_if_block(ctx) {
	let section;
	let div1;
	let div0;
	let h1;
	let t0;
	let t1;
	let h2;
	let t2;
	let section_class_value;
	let section_transition;
	let current;

	const block = {
		c: function create() {
			section = element("section");
			div1 = element("div");
			div0 = element("div");
			h1 = element("h1");
			t0 = text("Title");
			t1 = space();
			h2 = element("h2");
			t2 = text("Subtitle");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h1 = claim_element(div0_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Title");
			h1_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t2 = claim_text(h2_nodes, "Subtitle");
			h2_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "title");
			add_location(h1, file, 65, 12, 1609);
			attr_dev(h2, "class", "subtitle");
			add_location(h2, file, 68, 12, 1678);
			attr_dev(div0, "class", "container");
			add_location(div0, file, 64, 10, 1573);
			attr_dev(div1, "class", "hero-body");
			add_location(div1, file, 63, 8, 1539);
			attr_dev(section, "class", section_class_value = "hero " + /*type*/ ctx[0]);
			add_location(section, file, 62, 6, 1484);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div1);
			append_dev(div1, div0);
			append_dev(div0, h1);
			append_dev(h1, t0);
			append_dev(div0, t1);
			append_dev(div0, h2);
			append_dev(h2, t2);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*type*/ 1 && section_class_value !== (section_class_value = "hero " + /*type*/ ctx[0])) {
				attr_dev(section, "class", section_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, true);
				section_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!section_transition) section_transition = create_bidirectional_transition(section, slide, {}, false);
			section_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			if (detaching && section_transition) section_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(62:4) {#if type}",
		ctx
	});

	return block;
}

// (56:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div;
	let button;
	let t0;
	let t1;
	let br0;
	let t2;
	let br1;
	let t3;
	let current;
	let dispose;
	let if_block = /*type*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			button = element("button");
			t0 = text("Update Hero");
			t1 = space();
			br0 = element("br");
			t2 = space();
			br1 = element("br");
			t3 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Update Hero");
			button_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			br0 = claim_element(div_nodes, "BR", {});
			t2 = claim_space(div_nodes);
			br1 = claim_element(div_nodes, "BR", {});
			t3 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "button is-primary");
			add_location(button, file, 56, 4, 1366);
			add_location(br0, file, 58, 4, 1444);
			add_location(br1, file, 59, 4, 1455);
			attr_dev(div, "slot", "preview");
			add_location(div, file, 55, 2, 1341);
			dispose = listen_dev(button, "click", /*update*/ ctx[1], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, button);
			append_dev(button, t0);
			append_dev(div, t1);
			append_dev(div, br0);
			append_dev(div, t2);
			append_dev(div, br1);
			append_dev(div, t3);
			if (if_block) if_block.m(div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*type*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(56:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (22:0) <Example horizontal={true} code={`<script>   import { fade } from 'svelte/transition'    const types = ['is-primary', 'is-success', 'is-danger', 'is-warning', 'is-info', 'is-link']   let type = 'is-primary'    async function update() {     type = ''      setTimeout(() => {       type = types[Math.floor(Math.random() * types.length)];     }, 1000)   } </script>  <button class="button is-primary" on:click={update}>Update Hero</button>  <br /> <br />  {#if type}   <section class="hero {type}" transition:slide>     <div class="hero-body">       <div class="container">         <h1 class="title">           Title         </h1>         <h2 class="subtitle">           Subtitle         </h2>       </div>     </div>   </section> {/if}`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(22:0) <Example horizontal={true} code={`<script>   import { fade } from 'svelte/transition'    const types = ['is-primary', 'is-success', 'is-danger', 'is-warning', 'is-info', 'is-link']   let type = 'is-primary'    async function update() {     type = ''      setTimeout(() => {       type = types[Math.floor(Math.random() * types.length)];     }, 1000)   } </script>  <button class=\\\"button is-primary\\\" on:click={update}>Update Hero</button>  <br /> <br />  {#if type}   <section class=\\\"hero {type}\\\" transition:slide>     <div class=\\\"hero-body\\\">       <div class=\\\"container\\\">         <h1 class=\\\"title\\\">           Title         </h1>         <h2 class=\\\"subtitle\\\">           Subtitle         </h2>       </div>     </div>   </section> {/if}`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let current;

	const docheader = new DocHeader({
			props: { title: "Hero", subtitle: "Hero headers" },
			$$inline: true
		});

	const example = new Example({
			props: {
				horizontal: true,
				code: `<script>
  import { fade } from 'svelte/transition'

  const types = ['is-primary', 'is-success', 'is-danger', 'is-warning', 'is-info', 'is-link']
  let type = 'is-primary'

  async function update() {
    type = ''

    setTimeout(() => {
      type = types[Math.floor(Math.random() * types.length)];
    }, 1000)
  }
</script>

<button class="button is-primary" on:click={update}>Update Hero</button>

<br />
<br />

{#if type}
  <section class="hero {type}" transition:slide>
    <div class="hero-body">
      <div class="container">
        <h1 class="title">
          Title
        </h1>
        <h2 class="subtitle">
          Subtitle
        </h2>
      </div>
    </div>
  </section>
{/if}`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t = space();
			create_component(example.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(example.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(example, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example_changes = {};

			if (dirty & /*$$scope, type*/ 9) {
				example_changes.$$scope = { dirty, ctx };
			}

			example.$set(example_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t);
			destroy_component(example, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const types = ["is-primary", "is-success", "is-danger", "is-warning", "is-info", "is-link"];
	let type = "is-primary";

	async function update() {
		$$invalidate(0, type = "");

		setTimeout(
			() => {
				$$invalidate(0, type = types[Math.floor(Math.random() * types.length)]);
			},
			1000
		);
	}

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("type" in $$props) $$invalidate(0, type = $$props.type);
	};

	return [type, update];
}

class Hero extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Hero",
			options,
			id: create_fragment.name
		});
	}
}

export default Hero;
