import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, f as element, R as text, D as claim_component, H as claim_space, g as claim_element, h as children, S as claim_text, i as detach_dev, j as attr_dev, k as add_location, E as mount_component, n as insert_dev, o as append_dev, A as transition_in, y as transition_out, F as destroy_component, a as noop } from './chunk.0f951886.js';
import { d as Button, j as Toast, k as Dialog } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';
import { a as JSDoc } from './chunk.472f5470.js';

/* src/routes/components/dialog.svelte generated by Svelte v3.16.7 */
const file = "src/routes/components/dialog.svelte";

// (91:4) <Button type="is-primary" on:click={() => alert()}>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dialog");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dialog");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(91:4) <Button type=\\\"is-primary\\\" on:click={() => alert()}>",
		ctx
	});

	return block;
}

// (92:4) <Button type="is-info" on:click={() => confirm()}>
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Confirm");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Confirm");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(92:4) <Button type=\\\"is-info\\\" on:click={() => confirm()}>",
		ctx
	});

	return block;
}

// (93:4) <Button type="is-danger" on:click={() => confirm('custom')}>
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Confirm (custom)");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Confirm (custom)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(93:4) <Button type=\\\"is-danger\\\" on:click={() => confirm('custom')}>",
		ctx
	});

	return block;
}

// (90:2) <div slot="preview">
function create_preview_slot_1(ctx) {
	let div;
	let t0;
	let t1;
	let current;

	const button0 = new Button({
			props: {
				type: "is-primary",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler*/ ctx[3]);

	const button1 = new Button({
			props: {
				type: "is-info",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_1*/ ctx[4]);

	const button2 = new Button({
			props: {
				type: "is-danger",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button2.$on("click", /*click_handler_2*/ ctx[5]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(button0.$$.fragment);
			t0 = space();
			create_component(button1.$$.fragment);
			t1 = space();
			create_component(button2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(button0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(button1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(button2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 89, 2, 2645);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button0, div, null);
			append_dev(div, t0);
			mount_component(button1, div, null);
			append_dev(div, t1);
			mount_component(button2, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_1.name,
		type: "slot",
		source: "(90:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (60:0) <Example code={`<script>   import { Button, Dialog, Toast } from 'svelma'    function alert() {     Dialog.alert('Alles ist gut')   }    const thenHandler = result => Toast.create(\`You \${result ? 'confirmed' : 'canceled'}\`)    function confirm(type) {     switch(type) {       case 'custom':         return Dialog.confirm({           message: 'This is a custom confirmation message',           title: "I'm a title!",           type: 'is-danger',           icon: 'times-circle'         })         .then(thenHandler)       default:         Dialog.confirm('Shall we dance?')         .then(thenHandler)     }   } </script>  <Button type="is-primary" on:click={() => alert()}>Dialog</Button> <Button type="is-info" on:click={() => confirm()}>Confirm</Button> <Button type="is-danger" on:click={() => confirm('custom')}>Confirm (custom)</Button> `}>
function create_default_slot_3(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(60:0) <Example code={`<script>   import { Button, Dialog, Toast } from 'svelma'    function alert() {     Dialog.alert('Alles ist gut')   }    const thenHandler = result => Toast.create(\\`You \\${result ? 'confirmed' : 'canceled'}\\`)    function confirm(type) {     switch(type) {       case 'custom':         return Dialog.confirm({           message: 'This is a custom confirmation message',           title: \\\"I'm a title!\\\",           type: 'is-danger',           icon: 'times-circle'         })         .then(thenHandler)       default:         Dialog.confirm('Shall we dance?')         .then(thenHandler)     }   } </script>  <Button type=\\\"is-primary\\\" on:click={() => alert()}>Dialog</Button> <Button type=\\\"is-info\\\" on:click={() => confirm()}>Confirm</Button> <Button type=\\\"is-danger\\\" on:click={() => confirm('custom')}>Confirm (custom)</Button> `}>",
		ctx
	});

	return block;
}

// (124:4) <Button type="is-primary" on:click={() => prompt()}>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Prompt");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Prompt");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(124:4) <Button type=\\\"is-primary\\\" on:click={() => prompt()}>",
		ctx
	});

	return block;
}

// (125:4) <Button type="is-link" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Date Prompt");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Date Prompt");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(125:4) <Button type=\\\"is-link\\\" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>",
		ctx
	});

	return block;
}

// (123:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div;
	let t;
	let current;

	const button0 = new Button({
			props: {
				type: "is-primary",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler_3*/ ctx[6]);

	const button1 = new Button({
			props: {
				type: "is-link",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_4*/ ctx[7]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(button0.$$.fragment);
			t = space();
			create_component(button1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(button0.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(button1.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 122, 2, 3849);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button0, div, null);
			append_dev(div, t);
			mount_component(button1, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button0);
			destroy_component(button1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(123:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (108:0) <Example code={`<script>   import { Button, Dialog, Toast } from 'svelma'    function prompt(opts) {     Dialog.prompt({       message: "What is your quest?",       ...opts     })     .then(prompt => Toast.create(\`Your answer was: '\${prompt}'\`))   } </script>  <Button type="is-primary" on:click={() => prompt()}>Prompt</Button> <Button type="is-link" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>` }>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(108:0) <Example code={`<script>   import { Button, Dialog, Toast } from 'svelma'    function prompt(opts) {     Dialog.prompt({       message: \\\"What is your quest?\\\",       ...opts     })     .then(prompt => Toast.create(\\`Your answer was: '\\${prompt}'\\`))   } </script>  <Button type=\\\"is-primary\\\" on:click={() => prompt()}>Prompt</Button> <Button type=\\\"is-link\\\" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>` }>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let p0;
	let t1;
	let t2;
	let p1;
	let t3;
	let code0;
	let t4;
	let t5;
	let code1;
	let t6;
	let t7;
	let code2;
	let t8;
	let t9;
	let code3;
	let t10;
	let t11;
	let t12;
	let t13;
	let hr;
	let t14;
	let p2;
	let t15;
	let t16;
	let p3;
	let t17;
	let code4;
	let t18;
	let t19;
	let code5;
	let t20;
	let t21;
	let code6;
	let t22;
	let t23;
	let t24;
	let t25;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Dialog",
				subtitle: "User alerts, promps, and confirmation dialogs"
			},
			$$inline: true
		});

	const example0 = new Example({
			props: {
				code: `<script>
  import { Button, Dialog, Toast } from 'svelma'

  function alert() {
    Dialog.alert('Alles ist gut')
  }

  const thenHandler = result => Toast.create(\`You \${result ? 'confirmed' : 'canceled'}\`)

  function confirm(type) {
    switch(type) {
      case 'custom':
        return Dialog.confirm({
          message: 'This is a custom confirmation message',
          title: "I'm a title!",
          type: 'is-danger',
          icon: 'times-circle'
        })
        .then(thenHandler)
      default:
        Dialog.confirm('Shall we dance?')
        .then(thenHandler)
    }
  }
</script>

<Button type="is-primary" on:click={() => alert()}>Dialog</Button>
<Button type="is-info" on:click={() => confirm()}>Confirm</Button>
<Button type="is-danger" on:click={() => confirm('custom')}>Confirm (custom)</Button>
`,
				$$slots: {
					default: [create_default_slot_3],
					preview: [create_preview_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example1 = new Example({
			props: {
				code: `<script>
  import { Button, Dialog, Toast } from 'svelma'

  function prompt(opts) {
    Dialog.prompt({
      message: "What is your quest?",
      ...opts
    })
    .then(prompt => Toast.create(\`Your answer was: '\${prompt}'\`))
  }
</script>

<Button type="is-primary" on:click={() => prompt()}>Prompt</Button>
<Button type="is-link" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const jsdoc_1 = new JSDoc({
			props: { jsdoc: /*jsdoc*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t0 = space();
			p0 = element("p");
			t1 = text("Alert and Dialog");
			t2 = space();
			p1 = element("p");
			t3 = text("Use ");
			code0 = element("code");
			t4 = text("Dialog.alert()");
			t5 = text(" and ");
			code1 = element("code");
			t6 = text("Dialog.confirm()");
			t7 = text(" to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be ");
			code2 = element("code");
			t8 = text("false");
			t9 = text(". If the user clicks the confirm button the value will be ");
			code3 = element("code");
			t10 = text("true");
			t11 = text(".\n\nThe first argument can either be an object of options or a string to use as the message.");
			t12 = space();
			create_component(example0.$$.fragment);
			t13 = space();
			hr = element("hr");
			t14 = space();
			p2 = element("p");
			t15 = text("Prompt");
			t16 = space();
			p3 = element("p");
			t17 = text("Use ");
			code4 = element("code");
			t18 = text("Dialog.prompt()");
			t19 = text(" to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n");
			code5 = element("code");
			t20 = text("inputProps");
			t21 = text(" prop.\n\n");
			code6 = element("code");
			t22 = text("prompt()");
			t23 = text(" returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close.");
			t24 = space();
			create_component(example1.$$.fragment);
			t25 = space();
			create_component(jsdoc_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "Alert and Dialog");
			p0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			p1 = claim_element(nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "Use ");
			code0 = claim_element(p1_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t4 = claim_text(code0_nodes, "Dialog.alert()");
			code0_nodes.forEach(detach_dev);
			t5 = claim_text(p1_nodes, " and ");
			code1 = claim_element(p1_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t6 = claim_text(code1_nodes, "Dialog.confirm()");
			code1_nodes.forEach(detach_dev);
			t7 = claim_text(p1_nodes, " to create these kinds of dialogs.\nThe methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the\nvalue will be ");
			code2 = claim_element(p1_nodes, "CODE", {});
			var code2_nodes = children(code2);
			t8 = claim_text(code2_nodes, "false");
			code2_nodes.forEach(detach_dev);
			t9 = claim_text(p1_nodes, ". If the user clicks the confirm button the value will be ");
			code3 = claim_element(p1_nodes, "CODE", {});
			var code3_nodes = children(code3);
			t10 = claim_text(code3_nodes, "true");
			code3_nodes.forEach(detach_dev);
			t11 = claim_text(p1_nodes, ".\n\nThe first argument can either be an object of options or a string to use as the message.");
			p1_nodes.forEach(detach_dev);
			t12 = claim_space(nodes);
			claim_component(example0.$$.fragment, nodes);
			t13 = claim_space(nodes);
			hr = claim_element(nodes, "HR", { class: true });
			t14 = claim_space(nodes);
			p2 = claim_element(nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t15 = claim_text(p2_nodes, "Prompt");
			p2_nodes.forEach(detach_dev);
			t16 = claim_space(nodes);
			p3 = claim_element(nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t17 = claim_text(p3_nodes, "Use ");
			code4 = claim_element(p3_nodes, "CODE", {});
			var code4_nodes = children(code4);
			t18 = claim_text(code4_nodes, "Dialog.prompt()");
			code4_nodes.forEach(detach_dev);
			t19 = claim_text(p3_nodes, " to programmatically create prompts for user input. By default the\ndialog will be created with a required text input. You can control the props (attributes) on the prompt with the\n");
			code5 = claim_element(p3_nodes, "CODE", {});
			var code5_nodes = children(code5);
			t20 = claim_text(code5_nodes, "inputProps");
			code5_nodes.forEach(detach_dev);
			t21 = claim_text(p3_nodes, " prop.\n\n");
			code6 = claim_element(p3_nodes, "CODE", {});
			var code6_nodes = children(code6);
			t22 = claim_text(code6_nodes, "prompt()");
			code6_nodes.forEach(detach_dev);
			t23 = claim_text(p3_nodes, " returns a promise that will be resolved with the prompt input value if the user confirms, or null\nif they cancel/close.");
			p3_nodes.forEach(detach_dev);
			t24 = claim_space(nodes);
			claim_component(example1.$$.fragment, nodes);
			t25 = claim_space(nodes);
			claim_component(jsdoc_1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "title is-4");
			add_location(p0, file, 51, 0, 1308);
			add_location(code0, file, 53, 23, 1375);
			add_location(code1, file, 53, 55, 1407);
			add_location(code2, file, 55, 14, 1606);
			add_location(code3, file, 55, 90, 1682);
			attr_dev(p1, "class", "content");
			add_location(p1, file, 53, 0, 1352);
			attr_dev(hr, "class", "is-medium");
			add_location(hr, file, 96, 0, 2919);
			attr_dev(p2, "class", "title is-4");
			add_location(p2, file, 98, 0, 2943);
			add_location(code4, file, 100, 23, 3000);
			add_location(code5, file, 102, 0, 3208);
			add_location(code6, file, 104, 0, 3239);
			attr_dev(p3, "class", "content");
			add_location(p3, file, 100, 0, 2977);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t3);
			append_dev(p1, code0);
			append_dev(code0, t4);
			append_dev(p1, t5);
			append_dev(p1, code1);
			append_dev(code1, t6);
			append_dev(p1, t7);
			append_dev(p1, code2);
			append_dev(code2, t8);
			append_dev(p1, t9);
			append_dev(p1, code3);
			append_dev(code3, t10);
			append_dev(p1, t11);
			insert_dev(target, t12, anchor);
			mount_component(example0, target, anchor);
			insert_dev(target, t13, anchor);
			insert_dev(target, hr, anchor);
			insert_dev(target, t14, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t15);
			insert_dev(target, t16, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t17);
			append_dev(p3, code4);
			append_dev(code4, t18);
			append_dev(p3, t19);
			append_dev(p3, code5);
			append_dev(code5, t20);
			append_dev(p3, t21);
			append_dev(p3, code6);
			append_dev(code6, t22);
			append_dev(p3, t23);
			insert_dev(target, t24, anchor);
			mount_component(example1, target, anchor);
			insert_dev(target, t25, anchor);
			mount_component(jsdoc_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				example0_changes.$$scope = { dirty, ctx };
			}

			example0.$set(example0_changes);
			const example1_changes = {};

			if (dirty & /*$$scope*/ 256) {
				example1_changes.$$scope = { dirty, ctx };
			}

			example1.$set(example1_changes);
			const jsdoc_1_changes = {};
			if (dirty & /*jsdoc*/ 1) jsdoc_1_changes.jsdoc = /*jsdoc*/ ctx[0];
			jsdoc_1.$set(jsdoc_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example0.$$.fragment, local);
			transition_in(example1.$$.fragment, local);
			transition_in(jsdoc_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example0.$$.fragment, local);
			transition_out(example1.$$.fragment, local);
			transition_out(jsdoc_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t12);
			destroy_component(example0, detaching);
			if (detaching) detach_dev(t13);
			if (detaching) detach_dev(hr);
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t16);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t24);
			destroy_component(example1, detaching);
			if (detaching) detach_dev(t25);
			destroy_component(jsdoc_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const res = await this.fetch(`components/dialog.json`);
	const jsdoc = await res.json();
	return { jsdoc };
}

function alert() {
	Dialog.alert("Alles ist gut");
}

function prompt(opts) {
	Dialog.prompt({ message: "What is your quest?", ...opts }).then(prompt => Toast.create(`Your answer was: '${prompt}'`));
}

function instance($$self, $$props, $$invalidate) {
	let { jsdoc } = $$props;
	const thenHandler = result => Toast.create(`You ${result ? "confirmed" : "canceled"}`);

	function confirm(type) {
		switch (type) {
			case "custom":
				return Dialog.confirm({
					message: "This is a custom confirmation message",
					title: "I'm a title!",
					type: "is-danger",
					icon: "times-circle"
				}).then(thenHandler);
			default:
				Dialog.confirm("Shall we dance?").then(thenHandler);
		}
	}

	const writable_props = ["jsdoc"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Dialog> was created with unknown prop '${key}'`);
	});

	const click_handler = () => alert();
	const click_handler_1 = () => confirm();
	const click_handler_2 = () => confirm("custom");
	const click_handler_3 = () => prompt();

	const click_handler_4 = () => prompt({
		message: "Which date?",
		inputProps: { type: "date" }
	});

	$$self.$set = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
	};

	$$self.$capture_state = () => {
		return { jsdoc };
	};

	$$self.$inject_state = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
	};

	return [
		jsdoc,
		confirm,
		thenHandler,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4
	];
}

class Dialog_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { jsdoc: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Dialog_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*jsdoc*/ ctx[0] === undefined && !("jsdoc" in props)) {
			console.warn("<Dialog> was created without expected prop 'jsdoc'");
		}
	}

	get jsdoc() {
		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsdoc(value) {
		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Dialog_1;
export { preload };
