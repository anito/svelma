import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, u as onMount, C as create_component, G as space, D as claim_component, H as claim_space, E as mount_component, n as insert_dev, A as transition_in, y as transition_out, F as destroy_component, i as detach_dev, f as element, g as claim_element, j as attr_dev, k as add_location, M as add_render_callback, N as create_bidirectional_transition, R as text, h as children, S as claim_text, o as append_dev, T as set_data_dev, m as listen_dev, x as group_outros, z as check_outros, a as noop } from './chunk.0f951886.js';
import { r as fade } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';

/* src/routes/bulma/media.svelte generated by Svelte v3.16.7 */
const file = "src/routes/bulma/media.svelte";

// (98:12) {#if user}
function create_if_block_2(ctx) {
	let img;
	let img_src_value;
	let img_transition;
	let current;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "is-rounded");
			if (img.src !== (img_src_value = /*user*/ ctx[0].picture.medium)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Profile picture");
			add_location(img, file, 98, 14, 2930);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*user*/ 1 && img.src !== (img_src_value = /*user*/ ctx[0].picture.medium)) {
				attr_dev(img, "src", img_src_value);
			}
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, true);
				img_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, false);
			img_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching && img_transition) img_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(98:12) {#if user}",
		ctx
	});

	return block;
}

// (105:12) {#if user}
function create_if_block_1(ctx) {
	let p;
	let strong;
	let t0_value = /*titleize*/ ctx[1](/*user*/ ctx[0].name.first) + "";
	let t0;
	let t1;
	let t2_value = /*titleize*/ ctx[1](/*user*/ ctx[0].name.last) + "";
	let t2;
	let t3;
	let small0;
	let t4;
	let t5_value = /*user*/ ctx[0].login.username + "";
	let t5;
	let t6;
	let small1;
	let t7;
	let br;
	let t8;
	let p_transition;
	let current;

	const block = {
		c: function create() {
			p = element("p");
			strong = element("strong");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			small0 = element("small");
			t4 = text("@");
			t5 = text(t5_value);
			t6 = space();
			small1 = element("small");
			t7 = space();
			br = element("br");
			t8 = text("\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla\n                egestas. Nullam condimentum luctus turpis.");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", {});
			var p_nodes = children(p);
			strong = claim_element(p_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t0 = claim_text(strong_nodes, t0_value);
			t1 = claim_space(strong_nodes);
			t2 = claim_text(strong_nodes, t2_value);
			strong_nodes.forEach(detach_dev);
			t3 = claim_space(p_nodes);
			small0 = claim_element(p_nodes, "SMALL", {});
			var small0_nodes = children(small0);
			t4 = claim_text(small0_nodes, "@");
			t5 = claim_text(small0_nodes, t5_value);
			small0_nodes.forEach(detach_dev);
			t6 = claim_space(p_nodes);
			small1 = claim_element(p_nodes, "SMALL", {});
			children(small1).forEach(detach_dev);
			t7 = claim_space(p_nodes);
			br = claim_element(p_nodes, "BR", {});
			t8 = claim_text(p_nodes, "\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla\n                egestas. Nullam condimentum luctus turpis.");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(strong, file, 106, 16, 3215);
			add_location(small0, file, 107, 16, 3303);
			add_location(small1, file, 108, 16, 3357);
			add_location(br, file, 109, 16, 3383);
			add_location(p, file, 105, 14, 3179);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, strong);
			append_dev(strong, t0);
			append_dev(strong, t1);
			append_dev(strong, t2);
			append_dev(p, t3);
			append_dev(p, small0);
			append_dev(small0, t4);
			append_dev(small0, t5);
			append_dev(p, t6);
			append_dev(p, small1);
			append_dev(p, t7);
			append_dev(p, br);
			append_dev(p, t8);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*user*/ 1) && t0_value !== (t0_value = /*titleize*/ ctx[1](/*user*/ ctx[0].name.first) + "")) set_data_dev(t0, t0_value);
			if ((!current || dirty & /*user*/ 1) && t2_value !== (t2_value = /*titleize*/ ctx[1](/*user*/ ctx[0].name.last) + "")) set_data_dev(t2, t2_value);
			if ((!current || dirty & /*user*/ 1) && t5_value !== (t5_value = /*user*/ ctx[0].login.username + "")) set_data_dev(t5, t5_value);
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!p_transition) p_transition = create_bidirectional_transition(p, fade, {}, true);
				p_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!p_transition) p_transition = create_bidirectional_transition(p, fade, {}, false);
			p_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (detaching && p_transition) p_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(105:12) {#if user}",
		ctx
	});

	return block;
}

// (116:10) {#if user}
function create_if_block(ctx) {
	let nav;
	let div;
	let a0;
	let span0;
	let i0;
	let t0;
	let a1;
	let span1;
	let i1;
	let t1;
	let a2;
	let span2;
	let i2;
	let nav_transition;
	let current;

	const block = {
		c: function create() {
			nav = element("nav");
			div = element("div");
			a0 = element("a");
			span0 = element("span");
			i0 = element("i");
			t0 = space();
			a1 = element("a");
			span1 = element("span");
			i1 = element("i");
			t1 = space();
			a2 = element("a");
			span2 = element("span");
			i2 = element("i");
			this.h();
		},
		l: function claim(nodes) {
			nav = claim_element(nodes, "NAV", { class: true });
			var nav_nodes = children(nav);
			div = claim_element(nav_nodes, "DIV", { class: true });
			var div_nodes = children(div);

			a0 = claim_element(div_nodes, "A", {
				href: true,
				class: true,
				"aria-label": true
			});

			var a0_nodes = children(a0);
			span0 = claim_element(a0_nodes, "SPAN", { class: true });
			var span0_nodes = children(span0);
			i0 = claim_element(span0_nodes, "I", { class: true, "aria-hidden": true });
			children(i0).forEach(detach_dev);
			span0_nodes.forEach(detach_dev);
			a0_nodes.forEach(detach_dev);
			t0 = claim_space(div_nodes);

			a1 = claim_element(div_nodes, "A", {
				href: true,
				class: true,
				"aria-label": true
			});

			var a1_nodes = children(a1);
			span1 = claim_element(a1_nodes, "SPAN", { class: true });
			var span1_nodes = children(span1);
			i1 = claim_element(span1_nodes, "I", { class: true, "aria-hidden": true });
			children(i1).forEach(detach_dev);
			span1_nodes.forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);

			a2 = claim_element(div_nodes, "A", {
				href: true,
				class: true,
				"aria-label": true
			});

			var a2_nodes = children(a2);
			span2 = claim_element(a2_nodes, "SPAN", { class: true });
			var span2_nodes = children(span2);
			i2 = claim_element(span2_nodes, "I", { class: true, "aria-hidden": true });
			children(i2).forEach(detach_dev);
			span2_nodes.forEach(detach_dev);
			a2_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(i0, "class", "fas fa-reply");
			attr_dev(i0, "aria-hidden", "true");
			add_location(i0, file, 120, 20, 3866);
			attr_dev(span0, "class", "icon is-small");
			add_location(span0, file, 119, 18, 3817);
			attr_dev(a0, "href", "");
			attr_dev(a0, "class", "level-item");
			attr_dev(a0, "aria-label", "reply");
			add_location(a0, file, 118, 16, 3752);
			attr_dev(i1, "class", "fas fa-retweet");
			attr_dev(i1, "aria-hidden", "true");
			add_location(i1, file, 125, 20, 4091);
			attr_dev(span1, "class", "icon is-small");
			add_location(span1, file, 124, 18, 4042);
			attr_dev(a1, "href", "");
			attr_dev(a1, "class", "level-item");
			attr_dev(a1, "aria-label", "retweet");
			add_location(a1, file, 123, 16, 3975);
			attr_dev(i2, "class", "fas fa-heart");
			attr_dev(i2, "aria-hidden", "true");
			add_location(i2, file, 130, 20, 4315);
			attr_dev(span2, "class", "icon is-small");
			add_location(span2, file, 129, 18, 4266);
			attr_dev(a2, "href", "");
			attr_dev(a2, "class", "level-item");
			attr_dev(a2, "aria-label", "like");
			add_location(a2, file, 128, 16, 4202);
			attr_dev(div, "class", "level-left");
			add_location(div, file, 117, 14, 3711);
			attr_dev(nav, "class", "level is-mobile");
			add_location(nav, file, 116, 12, 3651);
		},
		m: function mount(target, anchor) {
			insert_dev(target, nav, anchor);
			append_dev(nav, div);
			append_dev(div, a0);
			append_dev(a0, span0);
			append_dev(span0, i0);
			append_dev(div, t0);
			append_dev(div, a1);
			append_dev(a1, span1);
			append_dev(span1, i1);
			append_dev(div, t1);
			append_dev(div, a2);
			append_dev(a2, span2);
			append_dev(span2, i2);
			current = true;
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!nav_transition) nav_transition = create_bidirectional_transition(nav, fade, {}, true);
				nav_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!nav_transition) nav_transition = create_bidirectional_transition(nav, fade, {}, false);
			nav_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(nav);
			if (detaching && nav_transition) nav_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(116:10) {#if user}",
		ctx
	});

	return block;
}

// (88:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div0;
	let button;
	let t0;
	let t1;
	let br0;
	let t2;
	let br1;
	let t3;
	let div4;
	let article;
	let div1;
	let figure;
	let t4;
	let div3;
	let div2;
	let t5;
	let current;
	let dispose;
	let if_block0 = /*user*/ ctx[0] && create_if_block_2(ctx);
	let if_block1 = /*user*/ ctx[0] && create_if_block_1(ctx);
	let if_block2 = /*user*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div0 = element("div");
			button = element("button");
			t0 = text("Fetch New User");
			t1 = space();
			br0 = element("br");
			t2 = space();
			br1 = element("br");
			t3 = space();
			div4 = element("div");
			article = element("article");
			div1 = element("div");
			figure = element("figure");
			if (if_block0) if_block0.c();
			t4 = space();
			div3 = element("div");
			div2 = element("div");
			if (if_block1) if_block1.c();
			t5 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { slot: true });
			var div0_nodes = children(div0);
			button = claim_element(div0_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Fetch New User");
			button_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			br0 = claim_element(div0_nodes, "BR", {});
			t2 = claim_space(div0_nodes);
			br1 = claim_element(div0_nodes, "BR", {});
			t3 = claim_space(div0_nodes);
			div4 = claim_element(div0_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			article = claim_element(div4_nodes, "ARTICLE", { class: true });
			var article_nodes = children(article);
			div1 = claim_element(article_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			figure = claim_element(div1_nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			if (if_block0) if_block0.l(figure_nodes);
			figure_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t4 = claim_space(article_nodes);
			div3 = claim_element(article_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (if_block1) if_block1.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			if (if_block2) if_block2.l(div3_nodes);
			div3_nodes.forEach(detach_dev);
			article_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "button is-primary");
			add_location(button, file, 88, 4, 2662);
			add_location(br0, file, 90, 4, 2747);
			add_location(br1, file, 91, 4, 2758);
			attr_dev(figure, "class", "image is-64x64");
			add_location(figure, file, 96, 10, 2861);
			attr_dev(div1, "class", "media-left");
			add_location(div1, file, 95, 8, 2826);
			attr_dev(div2, "class", "content");
			add_location(div2, file, 103, 10, 3120);
			attr_dev(div3, "class", "media-content");
			add_location(div3, file, 102, 8, 3082);
			attr_dev(article, "class", "media");
			add_location(article, file, 94, 6, 2794);
			attr_dev(div4, "class", "box");
			add_location(div4, file, 93, 4, 2770);
			attr_dev(div0, "slot", "preview");
			add_location(div0, file, 87, 2, 2637);
			dispose = listen_dev(button, "click", /*updateUser*/ ctx[2], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, button);
			append_dev(button, t0);
			append_dev(div0, t1);
			append_dev(div0, br0);
			append_dev(div0, t2);
			append_dev(div0, br1);
			append_dev(div0, t3);
			append_dev(div0, div4);
			append_dev(div4, article);
			append_dev(article, div1);
			append_dev(div1, figure);
			if (if_block0) if_block0.m(figure, null);
			append_dev(article, t4);
			append_dev(article, div3);
			append_dev(div3, div2);
			if (if_block1) if_block1.m(div2, null);
			append_dev(div3, t5);
			if (if_block2) if_block2.m(div3, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*user*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
					transition_in(if_block0, 1);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(figure, null);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*user*/ ctx[0]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
					transition_in(if_block1, 1);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*user*/ ctx[0]) {
				if (!if_block2) {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div3, null);
				} else {
					transition_in(if_block2, 1);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(88:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (23:0) <Example horizontal={true} code={`<script>   import { onDestroy, onMount } from 'svelte'   import { fade } from 'svelte/transition'    let user    const titleize = s => s.replace(/^([a-z])/, (_, r) => r.toUpperCase())    async function updateUser() {     user = null     user = (await (await fetch('https://randomuser.me/api/')).json()).results[0]   } </script>  <button class="button is-primary" on:click={updateUser}>Fetch New User</button>  <br /> <br />  <div class="box">   <article class="media">     <div class="media-left">       <figure class="image is-64x64">         {#if user}           <img transition:fade class="is-rounded" src={user.picture.medium} alt="Profile picture" />         {/if}       </figure>     </div>     <div class="media-content">       <div class="content">         {#if user}           <p transition:fade>             <strong>{titleize(user.name.first)} {titleize(user.name.last)}</strong>             <small>@{user.login.username}</small>             <small />             <br />             Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla             egestas. Nullam condimentum luctus turpis.           </p>         {/if}       </div>       {#if user}         <nav class="level is-mobile" transition:fade>           <div class="level-left">             <a href class="level-item" aria-label="reply">               <span class="icon is-small">                 <i class="fas fa-reply" aria-hidden="true" />               </span>             </a>             <a href class="level-item" aria-label="retweet">               <span class="icon is-small">                 <i class="fas fa-retweet" aria-hidden="true" />               </span>             </a>             <a href class="level-item" aria-label="like">               <span class="icon is-small">                 <i class="fas fa-heart" aria-hidden="true" />               </span>             </a>           </div>         </nav>       {/if}     </div>   </article> </div>`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(23:0) <Example horizontal={true} code={`<script>   import { onDestroy, onMount } from 'svelte'   import { fade } from 'svelte/transition'    let user    const titleize = s => s.replace(/^([a-z])/, (_, r) => r.toUpperCase())    async function updateUser() {     user = null     user = (await (await fetch('https://randomuser.me/api/')).json()).results[0]   } </script>  <button class=\\\"button is-primary\\\" on:click={updateUser}>Fetch New User</button>  <br /> <br />  <div class=\\\"box\\\">   <article class=\\\"media\\\">     <div class=\\\"media-left\\\">       <figure class=\\\"image is-64x64\\\">         {#if user}           <img transition:fade class=\\\"is-rounded\\\" src={user.picture.medium} alt=\\\"Profile picture\\\" />         {/if}       </figure>     </div>     <div class=\\\"media-content\\\">       <div class=\\\"content\\\">         {#if user}           <p transition:fade>             <strong>{titleize(user.name.first)} {titleize(user.name.last)}</strong>             <small>@{user.login.username}</small>             <small />             <br />             Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla             egestas. Nullam condimentum luctus turpis.           </p>         {/if}       </div>       {#if user}         <nav class=\\\"level is-mobile\\\" transition:fade>           <div class=\\\"level-left\\\">             <a href class=\\\"level-item\\\" aria-label=\\\"reply\\\">               <span class=\\\"icon is-small\\\">                 <i class=\\\"fas fa-reply\\\" aria-hidden=\\\"true\\\" />               </span>             </a>             <a href class=\\\"level-item\\\" aria-label=\\\"retweet\\\">               <span class=\\\"icon is-small\\\">                 <i class=\\\"fas fa-retweet\\\" aria-hidden=\\\"true\\\" />               </span>             </a>             <a href class=\\\"level-item\\\" aria-label=\\\"like\\\">               <span class=\\\"icon is-small\\\">                 <i class=\\\"fas fa-heart\\\" aria-hidden=\\\"true\\\" />               </span>             </a>           </div>         </nav>       {/if}     </div>   </article> </div>`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Media",
				subtitle: "Social media UI element"
			},
			$$inline: true
		});

	const example = new Example({
			props: {
				horizontal: true,
				code: `<script>
  import { onDestroy, onMount } from 'svelte'
  import { fade } from 'svelte/transition'

  let user

  const titleize = s => s.replace(/^([a-z])/, (_, r) => r.toUpperCase())

  async function updateUser() {
    user = null
    user = (await (await fetch('https://randomuser.me/api/')).json()).results[0]
  }
</script>

<button class="button is-primary" on:click={updateUser}>Fetch New User</button>

<br />
<br />

<div class="box">
  <article class="media">
    <div class="media-left">
      <figure class="image is-64x64">
        {#if user}
          <img transition:fade class="is-rounded" src={user.picture.medium} alt="Profile picture" />
        {/if}
      </figure>
    </div>
    <div class="media-content">
      <div class="content">
        {#if user}
          <p transition:fade>
            <strong>{titleize(user.name.first)} {titleize(user.name.last)}</strong>
            <small>@{user.login.username}</small>
            <small />
            <br />
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean efficitur sit amet massa fringilla
            egestas. Nullam condimentum luctus turpis.
          </p>
        {/if}
      </div>
      {#if user}
        <nav class="level is-mobile" transition:fade>
          <div class="level-left">
            <a href class="level-item" aria-label="reply">
              <span class="icon is-small">
                <i class="fas fa-reply" aria-hidden="true" />
              </span>
            </a>
            <a href class="level-item" aria-label="retweet">
              <span class="icon is-small">
                <i class="fas fa-retweet" aria-hidden="true" />
              </span>
            </a>
            <a href class="level-item" aria-label="like">
              <span class="icon is-small">
                <i class="fas fa-heart" aria-hidden="true" />
              </span>
            </a>
          </div>
        </nav>
      {/if}
    </div>
  </article>
</div>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t = space();
			create_component(example.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(example.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(example, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example_changes = {};

			if (dirty & /*$$scope, user*/ 17) {
				example_changes.$$scope = { dirty, ctx };
			}

			example.$set(example_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t);
			destroy_component(example, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let timer;
	let user;
	const titleize = s => s.replace(/^([a-z])/, (_, r) => r.toUpperCase());

	async function updateUser() {
		$$invalidate(0, user = null);
		$$invalidate(0, user = (await (await fetch("https://randomuser.me/api/")).json()).results[0]);
	}

	onMount(() => updateUser());

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		if ("timer" in $$props) timer = $$props.timer;
		if ("user" in $$props) $$invalidate(0, user = $$props.user);
	};

	return [user, titleize, updateUser];
}

class Media extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Media",
			options,
			id: create_fragment.name
		});
	}
}

export default Media;
