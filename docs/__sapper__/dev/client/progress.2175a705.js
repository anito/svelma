import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, u as onMount, C as create_component, G as space, D as claim_component, H as claim_space, E as mount_component, n as insert_dev, A as transition_in, y as transition_out, F as destroy_component, i as detach_dev, f as element, R as text, g as claim_element, h as children, S as claim_text, j as attr_dev, k as add_location, m as listen_dev, o as append_dev, x as group_outros, z as check_outros, a9 as destroy_each, a as noop } from './chunk.0f951886.js';
import { g as Progress } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';

/* src/routes/components/progress.svelte generated by Svelte v3.16.7 */
const file = "src/routes/components/progress.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	child_ctx[5] = i;
	return child_ctx;
}

// (61:4) {#each types as type, i}
function create_each_block(ctx) {
	let current;

	const progress = new Progress({
			props: {
				type: /*type*/ ctx[3],
				value: /*progresses*/ ctx[0][/*i*/ ctx[5]],
				duration: /*i*/ ctx[5] * 200,
				max: "100"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(progress.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(progress.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(progress, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const progress_changes = {};
			if (dirty & /*progresses*/ 1) progress_changes.value = /*progresses*/ ctx[0][/*i*/ ctx[5]];
			progress.$set(progress_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(progress.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(progress.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(progress, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(61:4) {#each types as type, i}",
		ctx
	});

	return block;
}

// (55:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div;
	let button;
	let t0;
	let t1;
	let br0;
	let t2;
	let br1;
	let t3;
	let t4;
	let br2;
	let t5;
	let br3;
	let t6;
	let p;
	let t7;
	let t8;
	let current;
	let dispose;
	let each_value = /*types*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const progress = new Progress({ props: { max: "100" }, $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			button = element("button");
			t0 = text("Update");
			t1 = space();
			br0 = element("br");
			t2 = space();
			br1 = element("br");
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			br2 = element("br");
			t5 = space();
			br3 = element("br");
			t6 = space();
			p = element("p");
			t7 = text("Indeterminate (no value)");
			t8 = space();
			create_component(progress.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t0 = claim_text(button_nodes, "Update");
			button_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			br0 = claim_element(div_nodes, "BR", {});
			t2 = claim_space(div_nodes);
			br1 = claim_element(div_nodes, "BR", {});
			t3 = claim_space(div_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			t4 = claim_space(div_nodes);
			br2 = claim_element(div_nodes, "BR", {});
			t5 = claim_space(div_nodes);
			br3 = claim_element(div_nodes, "BR", {});
			t6 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", { class: true });
			var p_nodes = children(p);
			t7 = claim_text(p_nodes, "Indeterminate (no value)");
			p_nodes.forEach(detach_dev);
			t8 = claim_space(div_nodes);
			claim_component(progress.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(button, "class", "button is-primary");
			add_location(button, file, 55, 4, 1304);
			add_location(br0, file, 57, 4, 1377);
			add_location(br1, file, 58, 4, 1388);
			add_location(br2, file, 64, 4, 1528);
			add_location(br3, file, 65, 4, 1537);
			attr_dev(p, "class", "title is-5");
			add_location(p, file, 67, 4, 1551);
			attr_dev(div, "slot", "preview");
			add_location(div, file, 54, 2, 1279);
			dispose = listen_dev(button, "click", /*update*/ ctx[2], false, false, false);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, button);
			append_dev(button, t0);
			append_dev(div, t1);
			append_dev(div, br0);
			append_dev(div, t2);
			append_dev(div, br1);
			append_dev(div, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			append_dev(div, t4);
			append_dev(div, br2);
			append_dev(div, t5);
			append_dev(div, br3);
			append_dev(div, t6);
			append_dev(div, p);
			append_dev(p, t7);
			append_dev(div, t8);
			mount_component(progress, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*types, progresses*/ 3) {
				each_value = /*types*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, t4);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(progress.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(progress.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			destroy_component(progress);
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(55:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (24:0) <Example code={`<script>   import { fade } from 'svelte/transition'    const types = ['is-primary', 'is-success', 'is-danger', 'is-warning', 'is-info', 'is-link']   let type = 'is-primary'    function update() {     types.forEach((type, i) => {       progresses[i] = Math.floor(Math.random() * 100)     })   }      onMount(() => {     update()   }) </script>  <button class="button is-primary" on:click={update}>Update</button>  <br /> <br />  {#each types as type, i}   <Progress {type} value={progresses[i]} duration={i * 200} max="100"></Progress> {/each}  <br> <br>  <p class="title is-5">Indeterminate (no value)</p> <Progress max="100"></Progress>`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(24:0) <Example code={`<script>   import { fade } from 'svelte/transition'    const types = ['is-primary', 'is-success', 'is-danger', 'is-warning', 'is-info', 'is-link']   let type = 'is-primary'    function update() {     types.forEach((type, i) => {       progresses[i] = Math.floor(Math.random() * 100)     })   }      onMount(() => {     update()   }) </script>  <button class=\\\"button is-primary\\\" on:click={update}>Update</button>  <br /> <br />  {#each types as type, i}   <Progress {type} value={progresses[i]} duration={i * 200} max=\\\"100\\\"></Progress> {/each}  <br> <br>  <p class=\\\"title is-5\\\">Indeterminate (no value)</p> <Progress max=\\\"100\\\"></Progress>`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let current;

	const docheader = new DocHeader({
			props: { title: "Hero", subtitle: "Hero headers" },
			$$inline: true
		});

	const example = new Example({
			props: {
				code: `<script>
  import { fade } from 'svelte/transition'

  const types = ['is-primary', 'is-success', 'is-danger', 'is-warning', 'is-info', 'is-link']
  let type = 'is-primary'

  function update() {
    types.forEach((type, i) => {
      progresses[i] = Math.floor(Math.random() * 100)
    })
  }
  
  onMount(() => {
    update()
  })
</script>

<button class="button is-primary" on:click={update}>Update</button>

<br />
<br />

{#each types as type, i}
  <Progress {type} value={progresses[i]} duration={i * 200} max="100"></Progress>
{/each}

<br>
<br>

<p class="title is-5">Indeterminate (no value)</p>
<Progress max="100"></Progress>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t = space();
			create_component(example.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(example.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(example, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example_changes = {};

			if (dirty & /*$$scope, progresses*/ 65) {
				example_changes.$$scope = { dirty, ctx };
			}

			example.$set(example_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t);
			destroy_component(example, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const types = ["is-primary", "is-success", "is-danger", "is-warning", "is-info", "is-link"];
	const progresses = Array(6).fill(0);

	function update() {
		types.forEach((type, i) => {
			$$invalidate(0, progresses[i] = Math.floor(Math.random() * 100), progresses);
		});
	}

	onMount(() => {
		update();
	});

	$$self.$capture_state = () => {
		return {};
	};

	$$self.$inject_state = $$props => {
		
	};

	return [progresses, types, update];
}

class Progress_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Progress_1",
			options,
			id: create_fragment.name
		});
	}
}

export default Progress_1;
