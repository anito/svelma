import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, f as element, R as text, D as claim_component, H as claim_space, g as claim_element, h as children, S as claim_text, i as detach_dev, j as attr_dev, k as add_location, E as mount_component, n as insert_dev, o as append_dev, A as transition_in, y as transition_out, F as destroy_component, W as binding_callbacks, ae as bind, af as add_flush_callback, a as noop } from './chunk.0f951886.js';
import { d as Button, e as Notification } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.146fff5a.js';
import { a as JSDoc } from './chunk.472f5470.js';

/* src/routes/components/notification.svelte generated by Svelte v3.16.7 */
const file = "src/routes/components/notification.svelte";

// (52:4) <Button class="block" on:click={() => (isOpen = !isOpen)}>
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Toggle");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Toggle");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(52:4) <Button class=\\\"block\\\" on:click={() => (isOpen = !isOpen)}>",
		ctx
	});

	return block;
}

// (53:4) <Notification bind:active={isOpen}>
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(53:4) <Notification bind:active={isOpen}>",
		ctx
	});

	return block;
}

// (51:2) <div slot="preview">
function create_preview_slot_4(ctx) {
	let div;
	let t;
	let updating_active;
	let current;

	const button = new Button({
			props: {
				class: "block",
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[3]);

	function notification_active_binding(value) {
		/*notification_active_binding*/ ctx[4].call(null, value);
	}

	let notification_props = {
		$$slots: { default: [create_default_slot_20] },
		$$scope: { ctx }
	};

	if (/*isOpen*/ ctx[1] !== void 0) {
		notification_props.active = /*isOpen*/ ctx[1];
	}

	const notification = new Notification({
			props: notification_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(notification, "active", notification_active_binding));

	const block = {
		c: function create() {
			div = element("div");
			create_component(button.$$.fragment);
			t = space();
			create_component(notification.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(button.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(notification.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 50, 2, 1430);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			append_dev(div, t);
			mount_component(notification, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const notification_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification_changes.$$scope = { dirty, ctx };
			}

			if (!updating_active && dirty & /*isOpen*/ 2) {
				updating_active = true;
				notification_changes.active = /*isOpen*/ ctx[1];
				add_flush_callback(() => updating_active = false);
			}

			notification.$set(notification_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(notification.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(notification.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
			destroy_component(notification);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_4.name,
		type: "slot",
		source: "(51:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (39:0) <Example   code={`<script>   import { Button, Notification } from 'svelma';    let isOpen = true </script>  <Button class="block" on:click={() => (isOpen = !isOpen)}>Toggle</Button> <Notification bind:active={isOpen}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>`}>
function create_default_slot_19(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(39:0) <Example   code={`<script>   import { Button, Notification } from 'svelma';    let isOpen = true </script>  <Button class=\\\"block\\\" on:click={() => (isOpen = !isOpen)}>Toggle</Button> <Notification bind:active={isOpen}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>`}>",
		ctx
	});

	return block;
}

// (94:4) <Notification>
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(94:4) <Notification>",
		ctx
	});

	return block;
}

// (99:4) <Notification type="is-info">
function create_default_slot_17(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(99:4) <Notification type=\\\"is-info\\\">",
		ctx
	});

	return block;
}

// (104:4) <Notification type="is-success">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(104:4) <Notification type=\\\"is-success\\\">",
		ctx
	});

	return block;
}

// (109:4) <Notification type="is-warning">
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(109:4) <Notification type=\\\"is-warning\\\">",
		ctx
	});

	return block;
}

// (114:4) <Notification type="is-danger">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(114:4) <Notification type=\\\"is-danger\\\">",
		ctx
	});

	return block;
}

// (93:2) <div slot="preview">
function create_preview_slot_3(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const notification0 = new Notification({
			props: {
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const notification1 = new Notification({
			props: {
				type: "is-info",
				$$slots: { default: [create_default_slot_17] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const notification2 = new Notification({
			props: {
				type: "is-success",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const notification3 = new Notification({
			props: {
				type: "is-warning",
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const notification4 = new Notification({
			props: {
				type: "is-danger",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(notification0.$$.fragment);
			t0 = space();
			create_component(notification1.$$.fragment);
			t1 = space();
			create_component(notification2.$$.fragment);
			t2 = space();
			create_component(notification3.$$.fragment);
			t3 = space();
			create_component(notification4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(notification0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(notification1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(notification2.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(notification3.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(notification4.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 92, 2, 2924);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(notification0, div, null);
			append_dev(div, t0);
			mount_component(notification1, div, null);
			append_dev(div, t1);
			mount_component(notification2, div, null);
			append_dev(div, t2);
			mount_component(notification3, div, null);
			append_dev(div, t3);
			mount_component(notification4, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const notification0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification0_changes.$$scope = { dirty, ctx };
			}

			notification0.$set(notification0_changes);
			const notification1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification1_changes.$$scope = { dirty, ctx };
			}

			notification1.$set(notification1_changes);
			const notification2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification2_changes.$$scope = { dirty, ctx };
			}

			notification2.$set(notification2_changes);
			const notification3_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification3_changes.$$scope = { dirty, ctx };
			}

			notification3.$set(notification3_changes);
			const notification4_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification4_changes.$$scope = { dirty, ctx };
			}

			notification4.$set(notification4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(notification0.$$.fragment, local);
			transition_in(notification1.$$.fragment, local);
			transition_in(notification2.$$.fragment, local);
			transition_in(notification3.$$.fragment, local);
			transition_in(notification4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(notification0.$$.fragment, local);
			transition_out(notification1.$$.fragment, local);
			transition_out(notification2.$$.fragment, local);
			transition_out(notification3.$$.fragment, local);
			transition_out(notification4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(notification0);
			destroy_component(notification1);
			destroy_component(notification2);
			destroy_component(notification3);
			destroy_component(notification4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_3.name,
		type: "slot",
		source: "(93:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (64:0) <Example   code={`<script>   import { Notification } from 'svelma'; </script>  <Notification>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type="is-info">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type="is-success">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type="is-warning">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type="is-danger">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>`}>
function create_default_slot_13(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(64:0) <Example   code={`<script>   import { Notification } from 'svelma'; </script>  <Notification>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type=\\\"is-info\\\">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type=\\\"is-success\\\">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type=\\\"is-warning\\\">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type=\\\"is-danger\\\">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>`}>",
		ctx
	});

	return block;
}

// (155:4) <Notification icon="question-circle">
function create_default_slot_12(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(155:4) <Notification icon=\\\"question-circle\\\">",
		ctx
	});

	return block;
}

// (160:4) <Notification type="is-info" icon={true}>
function create_default_slot_11(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(160:4) <Notification type=\\\"is-info\\\" icon={true}>",
		ctx
	});

	return block;
}

// (165:4) <Notification type="is-success" icon={true}>
function create_default_slot_10(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(165:4) <Notification type=\\\"is-success\\\" icon={true}>",
		ctx
	});

	return block;
}

// (170:4) <Notification type="is-warning" icon={true}>
function create_default_slot_9(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(170:4) <Notification type=\\\"is-warning\\\" icon={true}>",
		ctx
	});

	return block;
}

// (175:4) <Notification type="is-danger" icon={true}>
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(175:4) <Notification type=\\\"is-danger\\\" icon={true}>",
		ctx
	});

	return block;
}

// (154:2) <div slot="preview">
function create_preview_slot_2(ctx) {
	let div;
	let t0;
	let t1;
	let t2;
	let t3;
	let current;

	const notification0 = new Notification({
			props: {
				icon: "question-circle",
				$$slots: { default: [create_default_slot_12] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const notification1 = new Notification({
			props: {
				type: "is-info",
				icon: true,
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const notification2 = new Notification({
			props: {
				type: "is-success",
				icon: true,
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const notification3 = new Notification({
			props: {
				type: "is-warning",
				icon: true,
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const notification4 = new Notification({
			props: {
				type: "is-danger",
				icon: true,
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div = element("div");
			create_component(notification0.$$.fragment);
			t0 = space();
			create_component(notification1.$$.fragment);
			t1 = space();
			create_component(notification2.$$.fragment);
			t2 = space();
			create_component(notification3.$$.fragment);
			t3 = space();
			create_component(notification4.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(notification0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(notification1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(notification2.$$.fragment, div_nodes);
			t2 = claim_space(div_nodes);
			claim_component(notification3.$$.fragment, div_nodes);
			t3 = claim_space(div_nodes);
			claim_component(notification4.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 153, 2, 5274);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(notification0, div, null);
			append_dev(div, t0);
			mount_component(notification1, div, null);
			append_dev(div, t1);
			mount_component(notification2, div, null);
			append_dev(div, t2);
			mount_component(notification3, div, null);
			append_dev(div, t3);
			mount_component(notification4, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const notification0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification0_changes.$$scope = { dirty, ctx };
			}

			notification0.$set(notification0_changes);
			const notification1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification1_changes.$$scope = { dirty, ctx };
			}

			notification1.$set(notification1_changes);
			const notification2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification2_changes.$$scope = { dirty, ctx };
			}

			notification2.$set(notification2_changes);
			const notification3_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification3_changes.$$scope = { dirty, ctx };
			}

			notification3.$set(notification3_changes);
			const notification4_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification4_changes.$$scope = { dirty, ctx };
			}

			notification4.$set(notification4_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(notification0.$$.fragment, local);
			transition_in(notification1.$$.fragment, local);
			transition_in(notification2.$$.fragment, local);
			transition_in(notification3.$$.fragment, local);
			transition_in(notification4.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(notification0.$$.fragment, local);
			transition_out(notification1.$$.fragment, local);
			transition_out(notification2.$$.fragment, local);
			transition_out(notification3.$$.fragment, local);
			transition_out(notification4.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(notification0);
			destroy_component(notification1);
			destroy_component(notification2);
			destroy_component(notification3);
			destroy_component(notification4);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_2.name,
		type: "slot",
		source: "(154:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (125:0) <Example   code={`<script>   import { Notification } from 'svelma'; </script>  <Notification icon="question-circle">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type="is-info" icon={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type="is-success" icon={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type="is-warning" icon={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type="is-danger" icon={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>`}>
function create_default_slot_7(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(125:0) <Example   code={`<script>   import { Notification } from 'svelma'; </script>  <Notification icon=\\\"question-circle\\\">   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type=\\\"is-info\\\" icon={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type=\\\"is-success\\\" icon={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type=\\\"is-warning\\\" icon={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>  <Notification type=\\\"is-danger\\\" icon={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>`}>",
		ctx
	});

	return block;
}

// (204:4) <Button class="block" on:click={() => (autoIsOpen = true)}>
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Show");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Show");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(204:4) <Button class=\\\"block\\\" on:click={() => (autoIsOpen = true)}>",
		ctx
	});

	return block;
}

// (205:4) <Notification bind:active={autoIsOpen} autoClose={true}>
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id\n      hendrerit imperdiet, elit sapien laoreet elit");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(205:4) <Notification bind:active={autoIsOpen} autoClose={true}>",
		ctx
	});

	return block;
}

// (203:2) <div slot="preview">
function create_preview_slot_1(ctx) {
	let div;
	let t;
	let updating_active;
	let current;

	const button = new Button({
			props: {
				class: "block",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_1*/ ctx[5]);

	function notification_active_binding_1(value) {
		/*notification_active_binding_1*/ ctx[6].call(null, value);
	}

	let notification_props = {
		autoClose: true,
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	};

	if (/*autoIsOpen*/ ctx[2] !== void 0) {
		notification_props.active = /*autoIsOpen*/ ctx[2];
	}

	const notification = new Notification({
			props: notification_props,
			$$inline: true
		});

	binding_callbacks.push(() => bind(notification, "active", notification_active_binding_1));

	const block = {
		c: function create() {
			div = element("div");
			create_component(button.$$.fragment);
			t = space();
			create_component(notification.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(button.$$.fragment, div_nodes);
			t = claim_space(div_nodes);
			claim_component(notification.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 202, 2, 7040);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			append_dev(div, t);
			mount_component(notification, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
			const notification_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				notification_changes.$$scope = { dirty, ctx };
			}

			if (!updating_active && dirty & /*autoIsOpen*/ 4) {
				updating_active = true;
				notification_changes.active = /*autoIsOpen*/ ctx[2];
				add_flush_callback(() => updating_active = false);
			}

			notification.$set(notification_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(notification.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			transition_out(notification.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
			destroy_component(notification);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_1.name,
		type: "slot",
		source: "(203:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (192:0) <Example code={`<script>   import { Button, Notification } from 'svelma';    let autoIsOpen = false </script>  <Button class="block" on:click={() => (autoIsOpen = true)}>Show</Button> <Notification bind:active={autoIsOpen} autoClose={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>`}>
function create_default_slot_4(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(192:0) <Example code={`<script>   import { Button, Notification } from 'svelma';    let autoIsOpen = false </script>  <Button class=\\\"block\\\" on:click={() => (autoIsOpen = true)}>Show</Button> <Notification bind:active={autoIsOpen} autoClose={true}>   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id   hendrerit imperdiet, elit sapien laoreet elit </Notification>`}>",
		ctx
	});

	return block;
}

// (231:4) <Button class="block" on:click={() => showNotification()}>
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Show Notification");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Show Notification");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(231:4) <Button class=\\\"block\\\" on:click={() => showNotification()}>",
		ctx
	});

	return block;
}

// (232:4) <Button class="block" type="is-success" on:click={() => showNotification({ type: 'is-success' })}>
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Show Notification (success)");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Show Notification (success)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(232:4) <Button class=\\\"block\\\" type=\\\"is-success\\\" on:click={() => showNotification({ type: 'is-success' })}>",
		ctx
	});

	return block;
}

// (233:4) <Button class="block" type="is-danger" on:click={() => showNotification({ type: 'is-danger', position: 'is-bottom-right', icon: true })}>
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Show Notification (danger)");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Show Notification (danger)");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(233:4) <Button class=\\\"block\\\" type=\\\"is-danger\\\" on:click={() => showNotification({ type: 'is-danger', position: 'is-bottom-right', icon: true })}>",
		ctx
	});

	return block;
}

// (230:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div;
	let t0;
	let t1;
	let current;

	const button0 = new Button({
			props: {
				class: "block",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button0.$on("click", /*click_handler_2*/ ctx[7]);

	const button1 = new Button({
			props: {
				class: "block",
				type: "is-success",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button1.$on("click", /*click_handler_3*/ ctx[8]);

	const button2 = new Button({
			props: {
				class: "block",
				type: "is-danger",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button2.$on("click", /*click_handler_4*/ ctx[9]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(button0.$$.fragment);
			t0 = space();
			create_component(button1.$$.fragment);
			t1 = space();
			create_component(button2.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(button0.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(button1.$$.fragment, div_nodes);
			t1 = claim_space(div_nodes);
			claim_component(button2.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 229, 2, 8100);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button0, div, null);
			append_dev(div, t0);
			mount_component(button1, div, null);
			append_dev(div, t1);
			mount_component(button2, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(230:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (216:0) <Example code={`<script>   import { Button, Notification } from 'svelma';    function showNotification(props) {     Notification.create({       message: 'You opened this programmatically!',       ...props     })   } </script>  <Button class="block" on:click={() => showNotification()}>Show Notification</Button> <Button class="block" type="is-success" on:click={() => showNotification({ type: 'is-success' })}>Show Notification (success)</Button> <Button class="block" type="is-danger" on:click={() => showNotification({ type: 'is-danger', position: 'is-bottom-right', icon: true })}>Show Notification (danger)</Button>`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(216:0) <Example code={`<script>   import { Button, Notification } from 'svelma';    function showNotification(props) {     Notification.create({       message: 'You opened this programmatically!',       ...props     })   } </script>  <Button class=\\\"block\\\" on:click={() => showNotification()}>Show Notification</Button> <Button class=\\\"block\\\" type=\\\"is-success\\\" on:click={() => showNotification({ type: 'is-success' })}>Show Notification (success)</Button> <Button class=\\\"block\\\" type=\\\"is-danger\\\" on:click={() => showNotification({ type: 'is-danger', position: 'is-bottom-right', icon: true })}>Show Notification (danger)</Button>`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let t1;
	let hr0;
	let t2;
	let p0;
	let t3;
	let t4;
	let t5;
	let hr1;
	let t6;
	let p1;
	let t7;
	let t8;
	let t9;
	let hr2;
	let t10;
	let p2;
	let t11;
	let t12;
	let p3;
	let t13;
	let code;
	let t14;
	let t15;
	let t16;
	let t17;
	let hr3;
	let t18;
	let p4;
	let t19;
	let t20;
	let t21;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Notification",
				subtitle: "Notifications to alert users"
			},
			$$inline: true
		});

	const example0 = new Example({
			props: {
				code: `<script>
  import { Button, Notification } from 'svelma';

  let isOpen = true
</script>

<Button class="block" on:click={() => (isOpen = !isOpen)}>Toggle</Button>
<Notification bind:active={isOpen}>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>`,
				$$slots: {
					default: [create_default_slot_19],
					preview: [create_preview_slot_4]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example1 = new Example({
			props: {
				code: `<script>
  import { Notification } from 'svelma';
</script>

<Notification>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>

<Notification type="is-info">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>

<Notification type="is-success">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>

<Notification type="is-warning">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>

<Notification type="is-danger">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>`,
				$$slots: {
					default: [create_default_slot_13],
					preview: [create_preview_slot_3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example2 = new Example({
			props: {
				code: `<script>
  import { Notification } from 'svelma';
</script>

<Notification icon="question-circle">
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>

<Notification type="is-info" icon={true}>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>

<Notification type="is-success" icon={true}>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>

<Notification type="is-warning" icon={true}>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>

<Notification type="is-danger" icon={true}>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>`,
				$$slots: {
					default: [create_default_slot_7],
					preview: [create_preview_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example3 = new Example({
			props: {
				code: `<script>
  import { Button, Notification } from 'svelma';

  let autoIsOpen = false
</script>

<Button class="block" on:click={() => (autoIsOpen = true)}>Show</Button>
<Notification bind:active={autoIsOpen} autoClose={true}>
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce id fermentum quam. Proin sagittis, nibh id
  hendrerit imperdiet, elit sapien laoreet elit
</Notification>`,
				$$slots: {
					default: [create_default_slot_4],
					preview: [create_preview_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example4 = new Example({
			props: {
				code: `<script>
  import { Button, Notification } from 'svelma';

  function showNotification(props) {
    Notification.create({
      message: 'You opened this programmatically!',
      ...props
    })
  }
</script>

<Button class="block" on:click={() => showNotification()}>Show Notification</Button>
<Button class="block" type="is-success" on:click={() => showNotification({ type: 'is-success' })}>Show Notification (success)</Button>
<Button class="block" type="is-danger" on:click={() => showNotification({ type: 'is-danger', position: 'is-bottom-right', icon: true })}>Show Notification (danger)</Button>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const jsdoc_1 = new JSDoc({
			props: { jsdoc: /*jsdoc*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t0 = space();
			create_component(example0.$$.fragment);
			t1 = space();
			hr0 = element("hr");
			t2 = space();
			p0 = element("p");
			t3 = text("Types");
			t4 = space();
			create_component(example1.$$.fragment);
			t5 = space();
			hr1 = element("hr");
			t6 = space();
			p1 = element("p");
			t7 = text("Icons");
			t8 = space();
			create_component(example2.$$.fragment);
			t9 = space();
			hr2 = element("hr");
			t10 = space();
			p2 = element("p");
			t11 = text("Auto-close");
			t12 = space();
			p3 = element("p");
			t13 = text("Notification will close automatically after\n  ");
			code = element("code");
			t14 = text("duration");
			t15 = text("\n  .");
			t16 = space();
			create_component(example3.$$.fragment);
			t17 = space();
			hr3 = element("hr");
			t18 = space();
			p4 = element("p");
			t19 = text("Opening with code");
			t20 = space();
			create_component(example4.$$.fragment);
			t21 = space();
			create_component(jsdoc_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(example0.$$.fragment, nodes);
			t1 = claim_space(nodes);
			hr0 = claim_element(nodes, "HR", { class: true });
			t2 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "Types");
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(example1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			hr1 = claim_element(nodes, "HR", { class: true });
			t6 = claim_space(nodes);
			p1 = claim_element(nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t7 = claim_text(p1_nodes, "Icons");
			p1_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			claim_component(example2.$$.fragment, nodes);
			t9 = claim_space(nodes);
			hr2 = claim_element(nodes, "HR", { class: true });
			t10 = claim_space(nodes);
			p2 = claim_element(nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t11 = claim_text(p2_nodes, "Auto-close");
			p2_nodes.forEach(detach_dev);
			t12 = claim_space(nodes);
			p3 = claim_element(nodes, "P", {});
			var p3_nodes = children(p3);
			t13 = claim_text(p3_nodes, "Notification will close automatically after\n  ");
			code = claim_element(p3_nodes, "CODE", {});
			var code_nodes = children(code);
			t14 = claim_text(code_nodes, "duration");
			code_nodes.forEach(detach_dev);
			t15 = claim_text(p3_nodes, "\n  .");
			p3_nodes.forEach(detach_dev);
			t16 = claim_space(nodes);
			claim_component(example3.$$.fragment, nodes);
			t17 = claim_space(nodes);
			hr3 = claim_element(nodes, "HR", { class: true });
			t18 = claim_space(nodes);
			p4 = claim_element(nodes, "P", { class: true });
			var p4_nodes = children(p4);
			t19 = claim_text(p4_nodes, "Opening with code");
			p4_nodes.forEach(detach_dev);
			t20 = claim_space(nodes);
			claim_component(example4.$$.fragment, nodes);
			t21 = claim_space(nodes);
			claim_component(jsdoc_1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(hr0, "class", "is-medium");
			add_location(hr0, file, 59, 0, 1774);
			attr_dev(p0, "class", "title is-4");
			add_location(p0, file, 61, 0, 1800);
			attr_dev(hr1, "class", "is-medium");
			add_location(hr1, file, 120, 0, 4053);
			attr_dev(p1, "class", "title is-4");
			add_location(p1, file, 122, 0, 4079);
			attr_dev(hr2, "class", "is-medium");
			add_location(hr2, file, 181, 0, 6474);
			attr_dev(p2, "class", "title is-4");
			add_location(p2, file, 183, 0, 6500);
			add_location(code, file, 187, 2, 6590);
			add_location(p3, file, 185, 0, 6538);
			attr_dev(hr3, "class", "is-medium");
			add_location(hr3, file, 211, 0, 7404);
			attr_dev(p4, "class", "title is-4");
			add_location(p4, file, 213, 0, 7430);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(example0, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, hr0, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t3);
			insert_dev(target, t4, anchor);
			mount_component(example1, target, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, hr1, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t7);
			insert_dev(target, t8, anchor);
			mount_component(example2, target, anchor);
			insert_dev(target, t9, anchor);
			insert_dev(target, hr2, anchor);
			insert_dev(target, t10, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t11);
			insert_dev(target, t12, anchor);
			insert_dev(target, p3, anchor);
			append_dev(p3, t13);
			append_dev(p3, code);
			append_dev(code, t14);
			append_dev(p3, t15);
			insert_dev(target, t16, anchor);
			mount_component(example3, target, anchor);
			insert_dev(target, t17, anchor);
			insert_dev(target, hr3, anchor);
			insert_dev(target, t18, anchor);
			insert_dev(target, p4, anchor);
			append_dev(p4, t19);
			insert_dev(target, t20, anchor);
			mount_component(example4, target, anchor);
			insert_dev(target, t21, anchor);
			mount_component(jsdoc_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example0_changes = {};

			if (dirty & /*$$scope, isOpen*/ 1026) {
				example0_changes.$$scope = { dirty, ctx };
			}

			example0.$set(example0_changes);
			const example1_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				example1_changes.$$scope = { dirty, ctx };
			}

			example1.$set(example1_changes);
			const example2_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				example2_changes.$$scope = { dirty, ctx };
			}

			example2.$set(example2_changes);
			const example3_changes = {};

			if (dirty & /*$$scope, autoIsOpen*/ 1028) {
				example3_changes.$$scope = { dirty, ctx };
			}

			example3.$set(example3_changes);
			const example4_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				example4_changes.$$scope = { dirty, ctx };
			}

			example4.$set(example4_changes);
			const jsdoc_1_changes = {};
			if (dirty & /*jsdoc*/ 1) jsdoc_1_changes.jsdoc = /*jsdoc*/ ctx[0];
			jsdoc_1.$set(jsdoc_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example0.$$.fragment, local);
			transition_in(example1.$$.fragment, local);
			transition_in(example2.$$.fragment, local);
			transition_in(example3.$$.fragment, local);
			transition_in(example4.$$.fragment, local);
			transition_in(jsdoc_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example0.$$.fragment, local);
			transition_out(example1.$$.fragment, local);
			transition_out(example2.$$.fragment, local);
			transition_out(example3.$$.fragment, local);
			transition_out(example4.$$.fragment, local);
			transition_out(jsdoc_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(example0, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(hr0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t4);
			destroy_component(example1, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(hr1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t8);
			destroy_component(example2, detaching);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(hr2);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t12);
			if (detaching) detach_dev(p3);
			if (detaching) detach_dev(t16);
			destroy_component(example3, detaching);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(hr3);
			if (detaching) detach_dev(t18);
			if (detaching) detach_dev(p4);
			if (detaching) detach_dev(t20);
			destroy_component(example4, detaching);
			if (detaching) detach_dev(t21);
			destroy_component(jsdoc_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload() {
	const res = await this.fetch(`components/notification.json`);
	const jsdoc = await res.json();
	return { jsdoc };
}

function showNotification(props) {
	Notification.create({
		message: "You opened this programmatically!",
		...props
	});
}

function instance($$self, $$props, $$invalidate) {
	let { jsdoc } = $$props;
	let isOpen = true;
	let autoIsOpen = false;
	const writable_props = ["jsdoc"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Notification> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(1, isOpen = !isOpen);

	function notification_active_binding(value) {
		isOpen = value;
		$$invalidate(1, isOpen);
	}

	const click_handler_1 = () => $$invalidate(2, autoIsOpen = true);

	function notification_active_binding_1(value) {
		autoIsOpen = value;
		$$invalidate(2, autoIsOpen);
	}

	const click_handler_2 = () => showNotification();
	const click_handler_3 = () => showNotification({ type: "is-success" });

	const click_handler_4 = () => showNotification({
		type: "is-danger",
		position: "is-bottom-right",
		icon: true
	});

	$$self.$set = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
	};

	$$self.$capture_state = () => {
		return { jsdoc, isOpen, autoIsOpen };
	};

	$$self.$inject_state = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
		if ("isOpen" in $$props) $$invalidate(1, isOpen = $$props.isOpen);
		if ("autoIsOpen" in $$props) $$invalidate(2, autoIsOpen = $$props.autoIsOpen);
	};

	return [
		jsdoc,
		isOpen,
		autoIsOpen,
		click_handler,
		notification_active_binding,
		click_handler_1,
		notification_active_binding_1,
		click_handler_2,
		click_handler_3,
		click_handler_4
	];
}

class Notification_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { jsdoc: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Notification_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*jsdoc*/ ctx[0] === undefined && !("jsdoc" in props)) {
			console.warn("<Notification> was created without expected prop 'jsdoc'");
		}
	}

	get jsdoc() {
		throw new Error("<Notification>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsdoc(value) {
		throw new Error("<Notification>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Notification_1;
export { preload };
