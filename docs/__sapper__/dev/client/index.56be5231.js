import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, f as element, R as text, D as claim_component, H as claim_space, g as claim_element, h as children, S as claim_text, i as detach_dev, j as attr_dev, k as add_location, E as mount_component, n as insert_dev, o as append_dev, A as transition_in, y as transition_out, F as destroy_component, a as noop } from './chunk.0f951886.js';
import { c as Message } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import { a as Codeview } from './chunk.162a27e3.js';

/* src/routes/install/index.svelte generated by Svelte v3.16.7 */
const file = "src/routes/install/index.svelte";

// (16:4) <Codeview lang="bash">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("npm install --save bulma svelma rollup-plugin-postcss");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "npm install --save bulma svelma rollup-plugin-postcss");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(16:4) <Codeview lang=\\\"bash\\\">",
		ctx
	});

	return block;
}

// (37:4) <Codeview lang="html" code={` <!-- App.svelte --> <script>   import 'bulma/css/bulma.css' </script>     `}>
function create_default_slot_3(ctx) {
	const block = { c: noop, l: noop, m: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(37:4) <Codeview lang=\\\"html\\\" code={` <!-- App.svelte --> <script>   import 'bulma/css/bulma.css' </script>     `}>",
		ctx
	});

	return block;
}

// (48:4) <Codeview lang="html" code={` <script>   import { Button } from 'svelma' </script>  <Button>I am a Button</Button>     `}>
function create_default_slot_2(ctx) {
	const block = { c: noop, l: noop, m: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(48:4) <Codeview lang=\\\"html\\\" code={` <script>   import { Button } from 'svelma' </script>  <Button>I am a Button</Button>     `}>",
		ctx
	});

	return block;
}

// (60:4) <Codeview lang="html" code={` <script>   import { Svelma } from 'svelma' </script>  <Svelma.Button>I am a Button</Svelma.Button>     `}>
function create_default_slot_1(ctx) {
	const block = { c: noop, l: noop, m: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(60:4) <Codeview lang=\\\"html\\\" code={` <script>   import { Svelma } from 'svelma' </script>  <Svelma.Button>I am a Button</Svelma.Button>     `}>",
		ctx
	});

	return block;
}

// (80:4) <Message type="is-info" showClose={false} title="Coming soon..">
function create_default_slot(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("This feature is in progress");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "This feature is in progress");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(80:4) <Message type=\\\"is-info\\\" showClose={false} title=\\\"Coming soon..\\\">",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let div6;
	let div0;
	let p0;
	let t1;
	let t2;
	let div5;
	let p1;
	let t3;
	let t4;
	let p2;
	let t5;
	let t6;
	let p3;
	let t7;
	let t8;
	let t9;
	let div1;
	let t10;
	let code0;
	let t11;
	let t12;
	let code1;
	let t13;
	let t14;
	let t15;
	let t16;
	let p4;
	let t17;
	let t18;
	let div2;
	let t19;
	let t20;
	let t21;
	let div3;
	let t22;
	let t23;
	let t24;
	let div4;
	let t25;
	let t26;
	let t27;
	let hr;
	let t28;
	let div9;
	let div7;
	let p5;
	let t29;
	let t30;
	let div8;
	let p6;
	let t31;
	let t32;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Start",
				subtitle: "How to install and use Svelma"
			},
			$$inline: true
		});

	const codeview0 = new Codeview({
			props: {
				lang: "bash",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const codeview1 = new Codeview({
			props: {
				lang: "js",
				code: `import postcss from 'rollup-plugin-postcss'

// ...

export default {
  // ... 
  plugins: [
    svelte({
      // ...
    }),

    postcss(),
  }
}`
			},
			$$inline: true
		});

	const codeview2 = new Codeview({
			props: {
				lang: "html",
				code: `
<!-- App.svelte -->
<script>
  import 'bulma/css/bulma.css'
</script>
    `,
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const codeview3 = new Codeview({
			props: {
				lang: "html",
				code: `
<script>
  import { Button } from 'svelma'
</script>

<Button>I am a Button</Button>
    `,
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const codeview4 = new Codeview({
			props: {
				lang: "html",
				code: `
<script>
  import { Svelma } from 'svelma'
</script>

<Svelma.Button>I am a Button</Svelma.Button>
    `,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const message = new Message({
			props: {
				type: "is-info",
				showClose: false,
				title: "Coming soon..",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t0 = space();
			div6 = element("div");
			div0 = element("div");
			p0 = element("p");
			t1 = text("1");
			t2 = space();
			div5 = element("div");
			p1 = element("p");
			t3 = text("NPM");
			t4 = space();
			p2 = element("p");
			t5 = text("For use with a project using a bundler like Webpack, Rollup, or Parcel");
			t6 = space();
			p3 = element("p");
			t7 = text("Installation");
			t8 = space();
			create_component(codeview0.$$.fragment);
			t9 = space();
			div1 = element("div");
			t10 = text("Add ");
			code0 = element("code");
			t11 = text("rollup-plugin-postcss");
			t12 = text(" to your ");
			code1 = element("code");
			t13 = text("rollup.config.js");
			t14 = text(".");
			t15 = space();
			create_component(codeview1.$$.fragment);
			t16 = space();
			p4 = element("p");
			t17 = text("Usage");
			t18 = space();
			div2 = element("div");
			t19 = text("Import Bulma's CSS in your main app's component");
			t20 = space();
			create_component(codeview2.$$.fragment);
			t21 = space();
			div3 = element("div");
			t22 = text("Svelma components can be imported one at a time like so:");
			t23 = space();
			create_component(codeview3.$$.fragment);
			t24 = space();
			div4 = element("div");
			t25 = text("Or import the full Svelma package.");
			t26 = space();
			create_component(codeview4.$$.fragment);
			t27 = space();
			hr = element("hr");
			t28 = space();
			div9 = element("div");
			div7 = element("div");
			p5 = element("p");
			t29 = text("2");
			t30 = space();
			div8 = element("div");
			p6 = element("p");
			t31 = text("CDN");
			t32 = space();
			create_component(message.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div0 = claim_element(div6_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "1");
			p0_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			p1 = claim_element(div5_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t3 = claim_text(p1_nodes, "NPM");
			p1_nodes.forEach(detach_dev);
			t4 = claim_space(div5_nodes);
			p2 = claim_element(div5_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t5 = claim_text(p2_nodes, "For use with a project using a bundler like Webpack, Rollup, or Parcel");
			p2_nodes.forEach(detach_dev);
			t6 = claim_space(div5_nodes);
			p3 = claim_element(div5_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t7 = claim_text(p3_nodes, "Installation");
			p3_nodes.forEach(detach_dev);
			t8 = claim_space(div5_nodes);
			claim_component(codeview0.$$.fragment, div5_nodes);
			t9 = claim_space(div5_nodes);
			div1 = claim_element(div5_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t10 = claim_text(div1_nodes, "Add ");
			code0 = claim_element(div1_nodes, "CODE", {});
			var code0_nodes = children(code0);
			t11 = claim_text(code0_nodes, "rollup-plugin-postcss");
			code0_nodes.forEach(detach_dev);
			t12 = claim_text(div1_nodes, " to your ");
			code1 = claim_element(div1_nodes, "CODE", {});
			var code1_nodes = children(code1);
			t13 = claim_text(code1_nodes, "rollup.config.js");
			code1_nodes.forEach(detach_dev);
			t14 = claim_text(div1_nodes, ".");
			div1_nodes.forEach(detach_dev);
			t15 = claim_space(div5_nodes);
			claim_component(codeview1.$$.fragment, div5_nodes);
			t16 = claim_space(div5_nodes);
			p4 = claim_element(div5_nodes, "P", { class: true });
			var p4_nodes = children(p4);
			t17 = claim_text(p4_nodes, "Usage");
			p4_nodes.forEach(detach_dev);
			t18 = claim_space(div5_nodes);
			div2 = claim_element(div5_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			t19 = claim_text(div2_nodes, "Import Bulma's CSS in your main app's component");
			div2_nodes.forEach(detach_dev);
			t20 = claim_space(div5_nodes);
			claim_component(codeview2.$$.fragment, div5_nodes);
			t21 = claim_space(div5_nodes);
			div3 = claim_element(div5_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			t22 = claim_text(div3_nodes, "Svelma components can be imported one at a time like so:");
			div3_nodes.forEach(detach_dev);
			t23 = claim_space(div5_nodes);
			claim_component(codeview3.$$.fragment, div5_nodes);
			t24 = claim_space(div5_nodes);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			t25 = claim_text(div4_nodes, "Or import the full Svelma package.");
			div4_nodes.forEach(detach_dev);
			t26 = claim_space(div5_nodes);
			claim_component(codeview4.$$.fragment, div5_nodes);
			div5_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t27 = claim_space(nodes);
			hr = claim_element(nodes, "HR", { class: true });
			t28 = claim_space(nodes);
			div9 = claim_element(nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div7 = claim_element(div9_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			p5 = claim_element(div7_nodes, "P", { class: true });
			var p5_nodes = children(p5);
			t29 = claim_text(p5_nodes, "2");
			p5_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			t30 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			p6 = claim_element(div8_nodes, "P", { class: true });
			var p6_nodes = children(p6);
			t31 = claim_text(p6_nodes, "CDN");
			p6_nodes.forEach(detach_dev);
			t32 = claim_space(div8_nodes);
			claim_component(message.$$.fragment, div8_nodes);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "title");
			add_location(p0, file, 9, 4, 289);
			attr_dev(div0, "class", "media-left");
			add_location(div0, file, 8, 2, 260);
			attr_dev(p1, "class", "title");
			add_location(p1, file, 12, 4, 355);
			attr_dev(p2, "class", "subtitle is-spaced");
			add_location(p2, file, 13, 4, 384);
			attr_dev(p3, "class", "title is-4");
			add_location(p3, file, 14, 4, 493);
			add_location(code0, file, 17, 29, 653);
			add_location(code1, file, 17, 72, 696);
			attr_dev(div1, "class", "content");
			add_location(div1, file, 17, 4, 628);
			attr_dev(p4, "class", "title is-4");
			add_location(p4, file, 34, 4, 924);
			attr_dev(div2, "class", "content");
			add_location(div2, file, 35, 4, 960);
			attr_dev(div3, "class", "content");
			add_location(div3, file, 44, 4, 1168);
			attr_dev(div4, "class", "content");
			add_location(div4, file, 56, 4, 1412);
			attr_dev(div5, "class", "media-content");
			add_location(div5, file, 11, 2, 323);
			attr_dev(div6, "class", "media");
			add_location(div6, file, 7, 0, 238);
			attr_dev(hr, "class", "is-medium");
			add_location(hr, file, 71, 0, 1665);
			attr_dev(p5, "class", "title");
			add_location(p5, file, 75, 4, 1740);
			attr_dev(div7, "class", "media-left");
			add_location(div7, file, 74, 2, 1711);
			attr_dev(p6, "class", "title is-spaced");
			add_location(p6, file, 78, 4, 1806);
			attr_dev(div8, "class", "media-content");
			add_location(div8, file, 77, 2, 1774);
			attr_dev(div9, "class", "media");
			add_location(div9, file, 73, 0, 1689);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, div0);
			append_dev(div0, p0);
			append_dev(p0, t1);
			append_dev(div6, t2);
			append_dev(div6, div5);
			append_dev(div5, p1);
			append_dev(p1, t3);
			append_dev(div5, t4);
			append_dev(div5, p2);
			append_dev(p2, t5);
			append_dev(div5, t6);
			append_dev(div5, p3);
			append_dev(p3, t7);
			append_dev(div5, t8);
			mount_component(codeview0, div5, null);
			append_dev(div5, t9);
			append_dev(div5, div1);
			append_dev(div1, t10);
			append_dev(div1, code0);
			append_dev(code0, t11);
			append_dev(div1, t12);
			append_dev(div1, code1);
			append_dev(code1, t13);
			append_dev(div1, t14);
			append_dev(div5, t15);
			mount_component(codeview1, div5, null);
			append_dev(div5, t16);
			append_dev(div5, p4);
			append_dev(p4, t17);
			append_dev(div5, t18);
			append_dev(div5, div2);
			append_dev(div2, t19);
			append_dev(div5, t20);
			mount_component(codeview2, div5, null);
			append_dev(div5, t21);
			append_dev(div5, div3);
			append_dev(div3, t22);
			append_dev(div5, t23);
			mount_component(codeview3, div5, null);
			append_dev(div5, t24);
			append_dev(div5, div4);
			append_dev(div4, t25);
			append_dev(div5, t26);
			mount_component(codeview4, div5, null);
			insert_dev(target, t27, anchor);
			insert_dev(target, hr, anchor);
			insert_dev(target, t28, anchor);
			insert_dev(target, div9, anchor);
			append_dev(div9, div7);
			append_dev(div7, p5);
			append_dev(p5, t29);
			append_dev(div9, t30);
			append_dev(div9, div8);
			append_dev(div8, p6);
			append_dev(p6, t31);
			append_dev(div8, t32);
			mount_component(message, div8, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const codeview0_changes = {};

			if (dirty & /*$$scope*/ 1) {
				codeview0_changes.$$scope = { dirty, ctx };
			}

			codeview0.$set(codeview0_changes);
			const codeview2_changes = {};

			if (dirty & /*$$scope*/ 1) {
				codeview2_changes.$$scope = { dirty, ctx };
			}

			codeview2.$set(codeview2_changes);
			const codeview3_changes = {};

			if (dirty & /*$$scope*/ 1) {
				codeview3_changes.$$scope = { dirty, ctx };
			}

			codeview3.$set(codeview3_changes);
			const codeview4_changes = {};

			if (dirty & /*$$scope*/ 1) {
				codeview4_changes.$$scope = { dirty, ctx };
			}

			codeview4.$set(codeview4_changes);
			const message_changes = {};

			if (dirty & /*$$scope*/ 1) {
				message_changes.$$scope = { dirty, ctx };
			}

			message.$set(message_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(codeview0.$$.fragment, local);
			transition_in(codeview1.$$.fragment, local);
			transition_in(codeview2.$$.fragment, local);
			transition_in(codeview3.$$.fragment, local);
			transition_in(codeview4.$$.fragment, local);
			transition_in(message.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(codeview0.$$.fragment, local);
			transition_out(codeview1.$$.fragment, local);
			transition_out(codeview2.$$.fragment, local);
			transition_out(codeview3.$$.fragment, local);
			transition_out(codeview4.$$.fragment, local);
			transition_out(message.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div6);
			destroy_component(codeview0);
			destroy_component(codeview1);
			destroy_component(codeview2);
			destroy_component(codeview3);
			destroy_component(codeview4);
			if (detaching) detach_dev(t27);
			if (detaching) detach_dev(hr);
			if (detaching) detach_dev(t28);
			if (detaching) detach_dev(div9);
			destroy_component(message);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

class Index extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, null, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Index",
			options,
			id: create_fragment.name
		});
	}
}

export default Index;
