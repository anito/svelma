import { c as SvelteComponentDev, d as init, b as safe_not_equal, e as dispatch_dev, C as create_component, G as space, f as element, R as text, D as claim_component, H as claim_space, g as claim_element, h as children, S as claim_text, i as detach_dev, j as attr_dev, k as add_location, E as mount_component, n as insert_dev, o as append_dev, A as transition_in, y as transition_out, F as destroy_component, a as noop, T as set_data_dev } from './chunk.0f951886.js';
import { d as Button, i as Icon } from './chunk.b9034416.js';
import './chunk.0a41e55b.js';
import { a as DocHeader } from './chunk.45862366.js';
import './chunk.162a27e3.js';
import { a as Example } from './chunk.09bae8d1.js';
import { a as JSDoc } from './chunk.472f5470.js';

/* src/routes/components/button.svelte generated by Svelte v3.16.7 */
const file = "src/routes/components/button.svelte";

// (48:4) <Button type="is-primary" on:click={() => counter++}>
function create_default_slot_34(ctx) {
	let t0;
	let t1;

	const block = {
		c: function create() {
			t0 = text("Click!: ");
			t1 = text(/*counter*/ ctx[1]);
		},
		l: function claim(nodes) {
			t0 = claim_text(nodes, "Click!: ");
			t1 = claim_text(nodes, /*counter*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*counter*/ 2) set_data_dev(t1, /*counter*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_34.name,
		type: "slot",
		source: "(48:4) <Button type=\\\"is-primary\\\" on:click={() => counter++}>",
		ctx
	});

	return block;
}

// (47:2) <div slot="preview">
function create_preview_slot_3(ctx) {
	let div;
	let current;

	const button = new Button({
			props: {
				type: "is-primary",
				$$slots: { default: [create_default_slot_34] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler*/ ctx[2]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(button.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { slot: true });
			var div_nodes = children(div);
			claim_component(button.$$.fragment, div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "slot", "preview");
			add_location(div, file, 46, 2, 1535);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope, counter*/ 10) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_3.name,
		type: "slot",
		source: "(47:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (38:0) <Example code={`<script>   import { Button } from 'svelma'    let counter = 0 </script>  <Button type="is-primary" on:click={() => counter++}>   Click!: {counter} </Button>`}>
function create_default_slot_33(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_33.name,
		type: "slot",
		source: "(38:0) <Example code={`<script>   import { Button } from 'svelma'    let counter = 0 </script>  <Button type=\\\"is-primary\\\" on:click={() => counter++}>   Click!: {counter} </Button>`}>",
		ctx
	});

	return block;
}

// (87:6) <Button type="is-primary">
function create_default_slot_32(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Primary");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Primary");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_32.name,
		type: "slot",
		source: "(87:6) <Button type=\\\"is-primary\\\">",
		ctx
	});

	return block;
}

// (88:6) <Button type="is-success">
function create_default_slot_31(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Success");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Success");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_31.name,
		type: "slot",
		source: "(88:6) <Button type=\\\"is-success\\\">",
		ctx
	});

	return block;
}

// (89:6) <Button type="is-danger">
function create_default_slot_30(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Danger");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Danger");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_30.name,
		type: "slot",
		source: "(89:6) <Button type=\\\"is-danger\\\">",
		ctx
	});

	return block;
}

// (90:6) <Button type="is-warning">
function create_default_slot_29(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Warning");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Warning");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_29.name,
		type: "slot",
		source: "(90:6) <Button type=\\\"is-warning\\\">",
		ctx
	});

	return block;
}

// (91:6) <Button type="is-info">
function create_default_slot_28(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Info");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Info");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_28.name,
		type: "slot",
		source: "(91:6) <Button type=\\\"is-info\\\">",
		ctx
	});

	return block;
}

// (92:6) <Button type="is-link">
function create_default_slot_27(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Link");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Link");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_27.name,
		type: "slot",
		source: "(92:6) <Button type=\\\"is-link\\\">",
		ctx
	});

	return block;
}

// (93:6) <Button type="is-light">
function create_default_slot_26(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Light");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Light");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_26.name,
		type: "slot",
		source: "(93:6) <Button type=\\\"is-light\\\">",
		ctx
	});

	return block;
}

// (94:6) <Button type="is-dark">
function create_default_slot_25(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Dark");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Dark");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_25.name,
		type: "slot",
		source: "(94:6) <Button type=\\\"is-dark\\\">",
		ctx
	});

	return block;
}

// (95:6) <Button type="is-text">
function create_default_slot_24(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Text");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Text");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_24.name,
		type: "slot",
		source: "(95:6) <Button type=\\\"is-text\\\">",
		ctx
	});

	return block;
}

// (98:6) <Button disabled>
function create_default_slot_23(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Disabled");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Disabled");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_23.name,
		type: "slot",
		source: "(98:6) <Button disabled>",
		ctx
	});

	return block;
}

// (99:6) <Button type="is-primary" loading>
function create_default_slot_22(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Loading");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Loading");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_22.name,
		type: "slot",
		source: "(99:6) <Button type=\\\"is-primary\\\" loading>",
		ctx
	});

	return block;
}

// (100:6) <Button type="is-success" rounded>
function create_default_slot_21(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Rounded");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Rounded");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_21.name,
		type: "slot",
		source: "(100:6) <Button type=\\\"is-success\\\" rounded>",
		ctx
	});

	return block;
}

// (101:6) <Button type="is-info" outline>
function create_default_slot_20(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Outlined");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Outlined");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_20.name,
		type: "slot",
		source: "(101:6) <Button type=\\\"is-info\\\" outline>",
		ctx
	});

	return block;
}

// (105:8) <Button type="is-primary" inverted>
function create_default_slot_19(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Inverted");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Inverted");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_19.name,
		type: "slot",
		source: "(105:8) <Button type=\\\"is-primary\\\" inverted>",
		ctx
	});

	return block;
}

// (106:8) <Button type="is-primary" inverted outlined>
function create_default_slot_18(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Invert Outlined");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Invert Outlined");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_18.name,
		type: "slot",
		source: "(106:8) <Button type=\\\"is-primary\\\" inverted outlined>",
		ctx
	});

	return block;
}

// (85:2) <div slot="preview">
function create_preview_slot_2(ctx) {
	let div0;
	let div1;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let div2;
	let t9;
	let t10;
	let t11;
	let t12;
	let div4;
	let div3;
	let t13;
	let current;

	const button0 = new Button({
			props: {
				type: "is-primary",
				$$slots: { default: [create_default_slot_32] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button1 = new Button({
			props: {
				type: "is-success",
				$$slots: { default: [create_default_slot_31] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button2 = new Button({
			props: {
				type: "is-danger",
				$$slots: { default: [create_default_slot_30] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button3 = new Button({
			props: {
				type: "is-warning",
				$$slots: { default: [create_default_slot_29] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button4 = new Button({
			props: {
				type: "is-info",
				$$slots: { default: [create_default_slot_28] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button5 = new Button({
			props: {
				type: "is-link",
				$$slots: { default: [create_default_slot_27] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button6 = new Button({
			props: {
				type: "is-light",
				$$slots: { default: [create_default_slot_26] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button7 = new Button({
			props: {
				type: "is-dark",
				$$slots: { default: [create_default_slot_25] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button8 = new Button({
			props: {
				type: "is-text",
				$$slots: { default: [create_default_slot_24] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button9 = new Button({
			props: {
				disabled: true,
				$$slots: { default: [create_default_slot_23] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button10 = new Button({
			props: {
				type: "is-primary",
				loading: true,
				$$slots: { default: [create_default_slot_22] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button11 = new Button({
			props: {
				type: "is-success",
				rounded: true,
				$$slots: { default: [create_default_slot_21] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button12 = new Button({
			props: {
				type: "is-info",
				outline: true,
				$$slots: { default: [create_default_slot_20] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button13 = new Button({
			props: {
				type: "is-primary",
				inverted: true,
				$$slots: { default: [create_default_slot_19] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button14 = new Button({
			props: {
				type: "is-primary",
				inverted: true,
				outlined: true,
				$$slots: { default: [create_default_slot_18] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			div1 = element("div");
			create_component(button0.$$.fragment);
			t0 = space();
			create_component(button1.$$.fragment);
			t1 = space();
			create_component(button2.$$.fragment);
			t2 = space();
			create_component(button3.$$.fragment);
			t3 = space();
			create_component(button4.$$.fragment);
			t4 = space();
			create_component(button5.$$.fragment);
			t5 = space();
			create_component(button6.$$.fragment);
			t6 = space();
			create_component(button7.$$.fragment);
			t7 = space();
			create_component(button8.$$.fragment);
			t8 = space();
			div2 = element("div");
			create_component(button9.$$.fragment);
			t9 = space();
			create_component(button10.$$.fragment);
			t10 = space();
			create_component(button11.$$.fragment);
			t11 = space();
			create_component(button12.$$.fragment);
			t12 = space();
			div4 = element("div");
			div3 = element("div");
			create_component(button13.$$.fragment);
			t13 = space();
			create_component(button14.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { slot: true });
			var div0_nodes = children(div0);
			div1 = claim_element(div0_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(button0.$$.fragment, div1_nodes);
			t0 = claim_space(div1_nodes);
			claim_component(button1.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			claim_component(button2.$$.fragment, div1_nodes);
			t2 = claim_space(div1_nodes);
			claim_component(button3.$$.fragment, div1_nodes);
			t3 = claim_space(div1_nodes);
			claim_component(button4.$$.fragment, div1_nodes);
			t4 = claim_space(div1_nodes);
			claim_component(button5.$$.fragment, div1_nodes);
			t5 = claim_space(div1_nodes);
			claim_component(button6.$$.fragment, div1_nodes);
			t6 = claim_space(div1_nodes);
			claim_component(button7.$$.fragment, div1_nodes);
			t7 = claim_space(div1_nodes);
			claim_component(button8.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t8 = claim_space(div0_nodes);
			div2 = claim_element(div0_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(button9.$$.fragment, div2_nodes);
			t9 = claim_space(div2_nodes);
			claim_component(button10.$$.fragment, div2_nodes);
			t10 = claim_space(div2_nodes);
			claim_component(button11.$$.fragment, div2_nodes);
			t11 = claim_space(div2_nodes);
			claim_component(button12.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach_dev);
			t12 = claim_space(div0_nodes);
			div4 = claim_element(div0_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(button13.$$.fragment, div3_nodes);
			t13 = claim_space(div3_nodes);
			claim_component(button14.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div1, "class", "buttons svelte-1uf8rcq");
			add_location(div1, file, 85, 4, 2677);
			attr_dev(div2, "class", "buttons svelte-1uf8rcq");
			add_location(div2, file, 96, 4, 3125);
			attr_dev(div3, "class", "notification is-primary");
			add_location(div3, file, 103, 6, 3400);
			attr_dev(div4, "class", "buttons svelte-1uf8rcq");
			add_location(div4, file, 102, 4, 3372);
			attr_dev(div0, "slot", "preview");
			add_location(div0, file, 84, 2, 2652);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, div1);
			mount_component(button0, div1, null);
			append_dev(div1, t0);
			mount_component(button1, div1, null);
			append_dev(div1, t1);
			mount_component(button2, div1, null);
			append_dev(div1, t2);
			mount_component(button3, div1, null);
			append_dev(div1, t3);
			mount_component(button4, div1, null);
			append_dev(div1, t4);
			mount_component(button5, div1, null);
			append_dev(div1, t5);
			mount_component(button6, div1, null);
			append_dev(div1, t6);
			mount_component(button7, div1, null);
			append_dev(div1, t7);
			mount_component(button8, div1, null);
			append_dev(div0, t8);
			append_dev(div0, div2);
			mount_component(button9, div2, null);
			append_dev(div2, t9);
			mount_component(button10, div2, null);
			append_dev(div2, t10);
			mount_component(button11, div2, null);
			append_dev(div2, t11);
			mount_component(button12, div2, null);
			append_dev(div0, t12);
			append_dev(div0, div4);
			append_dev(div4, div3);
			mount_component(button13, div3, null);
			append_dev(div3, t13);
			mount_component(button14, div3, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
			const button3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button3_changes.$$scope = { dirty, ctx };
			}

			button3.$set(button3_changes);
			const button4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button4_changes.$$scope = { dirty, ctx };
			}

			button4.$set(button4_changes);
			const button5_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button5_changes.$$scope = { dirty, ctx };
			}

			button5.$set(button5_changes);
			const button6_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button6_changes.$$scope = { dirty, ctx };
			}

			button6.$set(button6_changes);
			const button7_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button7_changes.$$scope = { dirty, ctx };
			}

			button7.$set(button7_changes);
			const button8_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button8_changes.$$scope = { dirty, ctx };
			}

			button8.$set(button8_changes);
			const button9_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button9_changes.$$scope = { dirty, ctx };
			}

			button9.$set(button9_changes);
			const button10_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button10_changes.$$scope = { dirty, ctx };
			}

			button10.$set(button10_changes);
			const button11_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button11_changes.$$scope = { dirty, ctx };
			}

			button11.$set(button11_changes);
			const button12_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button12_changes.$$scope = { dirty, ctx };
			}

			button12.$set(button12_changes);
			const button13_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button13_changes.$$scope = { dirty, ctx };
			}

			button13.$set(button13_changes);
			const button14_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button14_changes.$$scope = { dirty, ctx };
			}

			button14.$set(button14_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			transition_in(button3.$$.fragment, local);
			transition_in(button4.$$.fragment, local);
			transition_in(button5.$$.fragment, local);
			transition_in(button6.$$.fragment, local);
			transition_in(button7.$$.fragment, local);
			transition_in(button8.$$.fragment, local);
			transition_in(button9.$$.fragment, local);
			transition_in(button10.$$.fragment, local);
			transition_in(button11.$$.fragment, local);
			transition_in(button12.$$.fragment, local);
			transition_in(button13.$$.fragment, local);
			transition_in(button14.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			transition_out(button3.$$.fragment, local);
			transition_out(button4.$$.fragment, local);
			transition_out(button5.$$.fragment, local);
			transition_out(button6.$$.fragment, local);
			transition_out(button7.$$.fragment, local);
			transition_out(button8.$$.fragment, local);
			transition_out(button9.$$.fragment, local);
			transition_out(button10.$$.fragment, local);
			transition_out(button11.$$.fragment, local);
			transition_out(button12.$$.fragment, local);
			transition_out(button13.$$.fragment, local);
			transition_out(button14.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			destroy_component(button3);
			destroy_component(button4);
			destroy_component(button5);
			destroy_component(button6);
			destroy_component(button7);
			destroy_component(button8);
			destroy_component(button9);
			destroy_component(button10);
			destroy_component(button11);
			destroy_component(button12);
			destroy_component(button13);
			destroy_component(button14);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_2.name,
		type: "slot",
		source: "(85:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (58:0) <Example code={`<script>   import { Button } from 'svelma' </script>  <div class="buttons">   <Button type="is-primary">Primary</Button>   <Button type="is-success">Success</Button>   <Button type="is-danger">Danger</Button>   <Button type="is-warning">Warning</Button>   <Button type="is-info">Info</Button>   <Button type="is-link">Link</Button>   <Button type="is-light">Light</Button>   <Button type="is-dark">Dark</Button>   <Button type="is-text">Text</Button> </div> <div class="buttons">   <Button disabled>Disabled</Button>   <Button type="is-primary" loading>Loading</Button>   <Button type="is-success" rounded>Rounded</Button>   <Button type="is-info" outline>Outlined</Button> </div> <div class="buttons">   <div class="notification is-primary">     <Button type="is-primary" inverted>Inverted</Button>     <Button type="is-primary" inverted outlined>Invert Outlined</Button>   </div> </div>`}>
function create_default_slot_17(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_17.name,
		type: "slot",
		source: "(58:0) <Example code={`<script>   import { Button } from 'svelma' </script>  <div class=\\\"buttons\\\">   <Button type=\\\"is-primary\\\">Primary</Button>   <Button type=\\\"is-success\\\">Success</Button>   <Button type=\\\"is-danger\\\">Danger</Button>   <Button type=\\\"is-warning\\\">Warning</Button>   <Button type=\\\"is-info\\\">Info</Button>   <Button type=\\\"is-link\\\">Link</Button>   <Button type=\\\"is-light\\\">Light</Button>   <Button type=\\\"is-dark\\\">Dark</Button>   <Button type=\\\"is-text\\\">Text</Button> </div> <div class=\\\"buttons\\\">   <Button disabled>Disabled</Button>   <Button type=\\\"is-primary\\\" loading>Loading</Button>   <Button type=\\\"is-success\\\" rounded>Rounded</Button>   <Button type=\\\"is-info\\\" outline>Outlined</Button> </div> <div class=\\\"buttons\\\">   <div class=\\\"notification is-primary\\\">     <Button type=\\\"is-primary\\\" inverted>Inverted</Button>     <Button type=\\\"is-primary\\\" inverted outlined>Invert Outlined</Button>   </div> </div>`}>",
		ctx
	});

	return block;
}

// (128:6) <Button size="is-small">
function create_default_slot_16(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Small");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Small");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_16.name,
		type: "slot",
		source: "(128:6) <Button size=\\\"is-small\\\">",
		ctx
	});

	return block;
}

// (129:6) <Button>
function create_default_slot_15(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Default");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Default");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_15.name,
		type: "slot",
		source: "(129:6) <Button>",
		ctx
	});

	return block;
}

// (130:6) <Button size="is-medium">
function create_default_slot_14(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Medium");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Medium");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_14.name,
		type: "slot",
		source: "(130:6) <Button size=\\\"is-medium\\\">",
		ctx
	});

	return block;
}

// (131:6) <Button size="is-large">
function create_default_slot_13(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Large");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Large");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_13.name,
		type: "slot",
		source: "(131:6) <Button size=\\\"is-large\\\">",
		ctx
	});

	return block;
}

// (126:2) <div slot="preview">
function create_preview_slot_1(ctx) {
	let div0;
	let div1;
	let t0;
	let t1;
	let t2;
	let current;

	const button0 = new Button({
			props: {
				size: "is-small",
				$$slots: { default: [create_default_slot_16] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button1 = new Button({
			props: {
				$$slots: { default: [create_default_slot_15] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button2 = new Button({
			props: {
				size: "is-medium",
				$$slots: { default: [create_default_slot_14] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button3 = new Button({
			props: {
				size: "is-large",
				$$slots: { default: [create_default_slot_13] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			div1 = element("div");
			create_component(button0.$$.fragment);
			t0 = space();
			create_component(button1.$$.fragment);
			t1 = space();
			create_component(button2.$$.fragment);
			t2 = space();
			create_component(button3.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { slot: true });
			var div0_nodes = children(div0);
			div1 = claim_element(div0_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(button0.$$.fragment, div1_nodes);
			t0 = claim_space(div1_nodes);
			claim_component(button1.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			claim_component(button2.$$.fragment, div1_nodes);
			t2 = claim_space(div1_nodes);
			claim_component(button3.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div1, "class", "buttons svelte-1uf8rcq");
			add_location(div1, file, 126, 4, 3959);
			attr_dev(div0, "slot", "preview");
			add_location(div0, file, 125, 2, 3934);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, div1);
			mount_component(button0, div1, null);
			append_dev(div1, t0);
			mount_component(button1, div1, null);
			append_dev(div1, t1);
			mount_component(button2, div1, null);
			append_dev(div1, t2);
			mount_component(button3, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
			const button3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button3_changes.$$scope = { dirty, ctx };
			}

			button3.$set(button3_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			transition_in(button3.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			transition_out(button3.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			destroy_component(button3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot_1.name,
		type: "slot",
		source: "(126:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (116:0) <Example code={`<script>   import { Button } from 'svelma' </script>  <div class="buttons">   <Button size="is-small">Small</Button>   <Button>Default</Button>   <Button size="is-medium">Medium</Button>   <Button size="is-large">Large</Button> </div>`}>
function create_default_slot_12(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_12.name,
		type: "slot",
		source: "(116:0) <Example code={`<script>   import { Button } from 'svelma' </script>  <div class=\\\"buttons\\\">   <Button size=\\\"is-small\\\">Small</Button>   <Button>Default</Button>   <Button size=\\\"is-medium\\\">Medium</Button>   <Button size=\\\"is-large\\\">Large</Button> </div>`}>",
		ctx
	});

	return block;
}

// (169:6) <Button>
function create_default_slot_11(ctx) {
	let current;
	const icon = new Icon({ props: { icon: "bold" }, $$inline: true });

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_11.name,
		type: "slot",
		source: "(169:6) <Button>",
		ctx
	});

	return block;
}

// (172:6) <Button>
function create_default_slot_10(ctx) {
	let current;

	const icon = new Icon({
			props: { icon: "underline" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_10.name,
		type: "slot",
		source: "(172:6) <Button>",
		ctx
	});

	return block;
}

// (175:6) <Button>
function create_default_slot_9(ctx) {
	let current;

	const icon = new Icon({
			props: { icon: "italic" },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(icon.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(icon.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(icon, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(icon, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_9.name,
		type: "slot",
		source: "(175:6) <Button>",
		ctx
	});

	return block;
}

// (180:6) <Button iconPack="fab" iconLeft="github">
function create_default_slot_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("GitHub");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "GitHub");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_8.name,
		type: "slot",
		source: "(180:6) <Button iconPack=\\\"fab\\\" iconLeft=\\\"github\\\">",
		ctx
	});

	return block;
}

// (181:6) <Button type="is-primary" iconPack="fab" iconLeft="twitter">
function create_default_slot_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Twitter");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Twitter");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_7.name,
		type: "slot",
		source: "(181:6) <Button type=\\\"is-primary\\\" iconPack=\\\"fab\\\" iconLeft=\\\"twitter\\\">",
		ctx
	});

	return block;
}

// (182:6) <Button type="is-success" iconPack="fa" iconLeft="check">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Save");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Save");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(182:6) <Button type=\\\"is-success\\\" iconPack=\\\"fa\\\" iconLeft=\\\"check\\\">",
		ctx
	});

	return block;
}

// (183:6) <Button type="is-danger" outline iconPack="fa" iconRight="times">
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Delete");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "Delete");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(183:6) <Button type=\\\"is-danger\\\" outline iconPack=\\\"fa\\\" iconRight=\\\"times\\\">",
		ctx
	});

	return block;
}

// (186:6) <Button size="is-small" iconPack="fab" iconLeft="github">
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("GitHub");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "GitHub");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(186:6) <Button size=\\\"is-small\\\" iconPack=\\\"fab\\\" iconLeft=\\\"github\\\">",
		ctx
	});

	return block;
}

// (187:6) <Button iconLeft="github" iconPack="fab">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("GitHub");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "GitHub");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(187:6) <Button iconLeft=\\\"github\\\" iconPack=\\\"fab\\\">",
		ctx
	});

	return block;
}

// (188:6) <Button size="is-medium" iconPack="fab" iconLeft="github">
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("GitHub");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "GitHub");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(188:6) <Button size=\\\"is-medium\\\" iconPack=\\\"fab\\\" iconLeft=\\\"github\\\">",
		ctx
	});

	return block;
}

// (189:6) <Button size="is-large" iconPack="fab" iconLeft="github">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("GitHub");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "GitHub");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(189:6) <Button size=\\\"is-large\\\" iconPack=\\\"fab\\\" iconLeft=\\\"github\\\">",
		ctx
	});

	return block;
}

// (167:2) <div slot="preview">
function create_preview_slot(ctx) {
	let div0;
	let div1;
	let t0;
	let t1;
	let t2;
	let div2;
	let t3;
	let t4;
	let t5;
	let t6;
	let div3;
	let t7;
	let t8;
	let t9;
	let current;

	const button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_11] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button1 = new Button({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button2 = new Button({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button3 = new Button({
			props: {
				iconPack: "fab",
				iconLeft: "github",
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button4 = new Button({
			props: {
				type: "is-primary",
				iconPack: "fab",
				iconLeft: "twitter",
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button5 = new Button({
			props: {
				type: "is-success",
				iconPack: "fa",
				iconLeft: "check",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button6 = new Button({
			props: {
				type: "is-danger",
				outline: true,
				iconPack: "fa",
				iconRight: "times",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button7 = new Button({
			props: {
				size: "is-small",
				iconPack: "fab",
				iconLeft: "github",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button8 = new Button({
			props: {
				iconLeft: "github",
				iconPack: "fab",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button9 = new Button({
			props: {
				size: "is-medium",
				iconPack: "fab",
				iconLeft: "github",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const button10 = new Button({
			props: {
				size: "is-large",
				iconPack: "fab",
				iconLeft: "github",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div0 = element("div");
			div1 = element("div");
			create_component(button0.$$.fragment);
			t0 = space();
			create_component(button1.$$.fragment);
			t1 = space();
			create_component(button2.$$.fragment);
			t2 = space();
			div2 = element("div");
			create_component(button3.$$.fragment);
			t3 = space();
			create_component(button4.$$.fragment);
			t4 = space();
			create_component(button5.$$.fragment);
			t5 = space();
			create_component(button6.$$.fragment);
			t6 = space();
			div3 = element("div");
			create_component(button7.$$.fragment);
			t7 = space();
			create_component(button8.$$.fragment);
			t8 = space();
			create_component(button9.$$.fragment);
			t9 = space();
			create_component(button10.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { slot: true });
			var div0_nodes = children(div0);
			div1 = claim_element(div0_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			claim_component(button0.$$.fragment, div1_nodes);
			t0 = claim_space(div1_nodes);
			claim_component(button1.$$.fragment, div1_nodes);
			t1 = claim_space(div1_nodes);
			claim_component(button2.$$.fragment, div1_nodes);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			div2 = claim_element(div0_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			claim_component(button3.$$.fragment, div2_nodes);
			t3 = claim_space(div2_nodes);
			claim_component(button4.$$.fragment, div2_nodes);
			t4 = claim_space(div2_nodes);
			claim_component(button5.$$.fragment, div2_nodes);
			t5 = claim_space(div2_nodes);
			claim_component(button6.$$.fragment, div2_nodes);
			div2_nodes.forEach(detach_dev);
			t6 = claim_space(div0_nodes);
			div3 = claim_element(div0_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			claim_component(button7.$$.fragment, div3_nodes);
			t7 = claim_space(div3_nodes);
			claim_component(button8.$$.fragment, div3_nodes);
			t8 = claim_space(div3_nodes);
			claim_component(button9.$$.fragment, div3_nodes);
			t9 = claim_space(div3_nodes);
			claim_component(button10.$$.fragment, div3_nodes);
			div3_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div1, "class", "buttons svelte-1uf8rcq");
			add_location(div1, file, 167, 4, 5161);
			attr_dev(div2, "class", "buttons svelte-1uf8rcq");
			add_location(div2, file, 178, 4, 5385);
			attr_dev(div3, "class", "buttons svelte-1uf8rcq");
			add_location(div3, file, 184, 4, 5732);
			attr_dev(div0, "slot", "preview");
			add_location(div0, file, 166, 2, 5136);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, div1);
			mount_component(button0, div1, null);
			append_dev(div1, t0);
			mount_component(button1, div1, null);
			append_dev(div1, t1);
			mount_component(button2, div1, null);
			append_dev(div0, t2);
			append_dev(div0, div2);
			mount_component(button3, div2, null);
			append_dev(div2, t3);
			mount_component(button4, div2, null);
			append_dev(div2, t4);
			mount_component(button5, div2, null);
			append_dev(div2, t5);
			mount_component(button6, div2, null);
			append_dev(div0, t6);
			append_dev(div0, div3);
			mount_component(button7, div3, null);
			append_dev(div3, t7);
			mount_component(button8, div3, null);
			append_dev(div3, t8);
			mount_component(button9, div3, null);
			append_dev(div3, t9);
			mount_component(button10, div3, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
			const button3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button3_changes.$$scope = { dirty, ctx };
			}

			button3.$set(button3_changes);
			const button4_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button4_changes.$$scope = { dirty, ctx };
			}

			button4.$set(button4_changes);
			const button5_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button5_changes.$$scope = { dirty, ctx };
			}

			button5.$set(button5_changes);
			const button6_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button6_changes.$$scope = { dirty, ctx };
			}

			button6.$set(button6_changes);
			const button7_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button7_changes.$$scope = { dirty, ctx };
			}

			button7.$set(button7_changes);
			const button8_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button8_changes.$$scope = { dirty, ctx };
			}

			button8.$set(button8_changes);
			const button9_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button9_changes.$$scope = { dirty, ctx };
			}

			button9.$set(button9_changes);
			const button10_changes = {};

			if (dirty & /*$$scope*/ 8) {
				button10_changes.$$scope = { dirty, ctx };
			}

			button10.$set(button10_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			transition_in(button3.$$.fragment, local);
			transition_in(button4.$$.fragment, local);
			transition_in(button5.$$.fragment, local);
			transition_in(button6.$$.fragment, local);
			transition_in(button7.$$.fragment, local);
			transition_in(button8.$$.fragment, local);
			transition_in(button9.$$.fragment, local);
			transition_in(button10.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			transition_out(button3.$$.fragment, local);
			transition_out(button4.$$.fragment, local);
			transition_out(button5.$$.fragment, local);
			transition_out(button6.$$.fragment, local);
			transition_out(button7.$$.fragment, local);
			transition_out(button8.$$.fragment, local);
			transition_out(button9.$$.fragment, local);
			transition_out(button10.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			destroy_component(button3);
			destroy_component(button4);
			destroy_component(button5);
			destroy_component(button6);
			destroy_component(button7);
			destroy_component(button8);
			destroy_component(button9);
			destroy_component(button10);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_preview_slot.name,
		type: "slot",
		source: "(167:2) <div slot=\\\"preview\\\">",
		ctx
	});

	return block;
}

// (140:0) <Example code={`<script>   import { Button, Icon } from 'svelma' </script>  <div class="buttons">   <Button>     <Icon icon="bold" />   </Button>   <Button>     <Icon icon="underline" />   </Button>   <Button>     <Icon icon="italic" />   </Button> </div> <div class="buttons">   <Button iconPack="fab" iconLeft="github">GitHub</Button>   <Button type="is-primary" iconPack="fab" iconLeft="twitter">Twitter</Button>   <Button type="is-success" iconPack="fa" iconLeft="check">Save</Button>   <Button type="is-danger" outline iconPack="fa" iconRight="times">Delete</Button> </div> <div class="buttons">   <Button size="is-small" iconPack="fab" iconLeft="github">GitHub</Button>   <Button iconLeft="github" iconPack="fab">GitHub</Button>   <Button size="is-medium" iconPack="fab" iconLeft="github">GitHub</Button>   <Button size="is-large" iconPack="fab" iconLeft="github">GitHub</Button> </div>`}>
function create_default_slot(ctx) {

	const block = {
		c: noop,
		l: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(140:0) <Example code={`<script>   import { Button, Icon } from 'svelma' </script>  <div class=\\\"buttons\\\">   <Button>     <Icon icon=\\\"bold\\\" />   </Button>   <Button>     <Icon icon=\\\"underline\\\" />   </Button>   <Button>     <Icon icon=\\\"italic\\\" />   </Button> </div> <div class=\\\"buttons\\\">   <Button iconPack=\\\"fab\\\" iconLeft=\\\"github\\\">GitHub</Button>   <Button type=\\\"is-primary\\\" iconPack=\\\"fab\\\" iconLeft=\\\"twitter\\\">Twitter</Button>   <Button type=\\\"is-success\\\" iconPack=\\\"fa\\\" iconLeft=\\\"check\\\">Save</Button>   <Button type=\\\"is-danger\\\" outline iconPack=\\\"fa\\\" iconRight=\\\"times\\\">Delete</Button> </div> <div class=\\\"buttons\\\">   <Button size=\\\"is-small\\\" iconPack=\\\"fab\\\" iconLeft=\\\"github\\\">GitHub</Button>   <Button iconLeft=\\\"github\\\" iconPack=\\\"fab\\\">GitHub</Button>   <Button size=\\\"is-medium\\\" iconPack=\\\"fab\\\" iconLeft=\\\"github\\\">GitHub</Button>   <Button size=\\\"is-large\\\" iconPack=\\\"fab\\\" iconLeft=\\\"github\\\">GitHub</Button> </div>`}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let t1;
	let hr0;
	let t2;
	let p0;
	let t3;
	let t4;
	let t5;
	let hr1;
	let t6;
	let p1;
	let t7;
	let t8;
	let t9;
	let hr2;
	let t10;
	let p2;
	let t11;
	let t12;
	let t13;
	let current;

	const docheader = new DocHeader({
			props: {
				title: "Buttons",
				subtitle: "Tasty clickable buttons"
			},
			$$inline: true
		});

	const example0 = new Example({
			props: {
				code: `<script>
  import { Button } from 'svelma'

  let counter = 0
</script>

<Button type="is-primary" on:click={() => counter++}>
  Click!: {counter}
</Button>`,
				$$slots: {
					default: [create_default_slot_33],
					preview: [create_preview_slot_3]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example1 = new Example({
			props: {
				code: `<script>
  import { Button } from 'svelma'
</script>

<div class="buttons">
  <Button type="is-primary">Primary</Button>
  <Button type="is-success">Success</Button>
  <Button type="is-danger">Danger</Button>
  <Button type="is-warning">Warning</Button>
  <Button type="is-info">Info</Button>
  <Button type="is-link">Link</Button>
  <Button type="is-light">Light</Button>
  <Button type="is-dark">Dark</Button>
  <Button type="is-text">Text</Button>
</div>
<div class="buttons">
  <Button disabled>Disabled</Button>
  <Button type="is-primary" loading>Loading</Button>
  <Button type="is-success" rounded>Rounded</Button>
  <Button type="is-info" outline>Outlined</Button>
</div>
<div class="buttons">
  <div class="notification is-primary">
    <Button type="is-primary" inverted>Inverted</Button>
    <Button type="is-primary" inverted outlined>Invert Outlined</Button>
  </div>
</div>`,
				$$slots: {
					default: [create_default_slot_17],
					preview: [create_preview_slot_2]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example2 = new Example({
			props: {
				code: `<script>
  import { Button } from 'svelma'
</script>

<div class="buttons">
  <Button size="is-small">Small</Button>
  <Button>Default</Button>
  <Button size="is-medium">Medium</Button>
  <Button size="is-large">Large</Button>
</div>`,
				$$slots: {
					default: [create_default_slot_12],
					preview: [create_preview_slot_1]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const example3 = new Example({
			props: {
				code: `<script>
  import { Button, Icon } from 'svelma'
</script>

<div class="buttons">
  <Button>
    <Icon icon="bold" />
  </Button>
  <Button>
    <Icon icon="underline" />
  </Button>
  <Button>
    <Icon icon="italic" />
  </Button>
</div>
<div class="buttons">
  <Button iconPack="fab" iconLeft="github">GitHub</Button>
  <Button type="is-primary" iconPack="fab" iconLeft="twitter">Twitter</Button>
  <Button type="is-success" iconPack="fa" iconLeft="check">Save</Button>
  <Button type="is-danger" outline iconPack="fa" iconRight="times">Delete</Button>
</div>
<div class="buttons">
  <Button size="is-small" iconPack="fab" iconLeft="github">GitHub</Button>
  <Button iconLeft="github" iconPack="fab">GitHub</Button>
  <Button size="is-medium" iconPack="fab" iconLeft="github">GitHub</Button>
  <Button size="is-large" iconPack="fab" iconLeft="github">GitHub</Button>
</div>`,
				$$slots: {
					default: [create_default_slot],
					preview: [create_preview_slot]
				},
				$$scope: { ctx }
			},
			$$inline: true
		});

	const jsdoc_1 = new JSDoc({
			props: { jsdoc: /*jsdoc*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(docheader.$$.fragment);
			t0 = space();
			create_component(example0.$$.fragment);
			t1 = space();
			hr0 = element("hr");
			t2 = space();
			p0 = element("p");
			t3 = text("States and styles");
			t4 = space();
			create_component(example1.$$.fragment);
			t5 = space();
			hr1 = element("hr");
			t6 = space();
			p1 = element("p");
			t7 = text("Sizes");
			t8 = space();
			create_component(example2.$$.fragment);
			t9 = space();
			hr2 = element("hr");
			t10 = space();
			p2 = element("p");
			t11 = text("Icons");
			t12 = space();
			create_component(example3.$$.fragment);
			t13 = space();
			create_component(jsdoc_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(docheader.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(example0.$$.fragment, nodes);
			t1 = claim_space(nodes);
			hr0 = claim_element(nodes, "HR", { class: true });
			t2 = claim_space(nodes);
			p0 = claim_element(nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t3 = claim_text(p0_nodes, "States and styles");
			p0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(example1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			hr1 = claim_element(nodes, "HR", { class: true });
			t6 = claim_space(nodes);
			p1 = claim_element(nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t7 = claim_text(p1_nodes, "Sizes");
			p1_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			claim_component(example2.$$.fragment, nodes);
			t9 = claim_space(nodes);
			hr2 = claim_element(nodes, "HR", { class: true });
			t10 = claim_space(nodes);
			p2 = claim_element(nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t11 = claim_text(p2_nodes, "Icons");
			p2_nodes.forEach(detach_dev);
			t12 = claim_space(nodes);
			claim_component(example3.$$.fragment, nodes);
			t13 = claim_space(nodes);
			claim_component(jsdoc_1.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(hr0, "class", "is-medium");
			add_location(hr0, file, 53, 0, 1673);
			attr_dev(p0, "class", "title is-4");
			add_location(p0, file, 55, 0, 1697);
			attr_dev(hr1, "class", "is-medium");
			add_location(hr1, file, 111, 0, 3621);
			attr_dev(p1, "class", "title is-4");
			add_location(p1, file, 113, 0, 3645);
			attr_dev(hr2, "class", "is-medium");
			add_location(hr2, file, 135, 0, 4181);
			attr_dev(p2, "class", "title is-4");
			add_location(p2, file, 137, 0, 4205);
		},
		m: function mount(target, anchor) {
			mount_component(docheader, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(example0, target, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, hr0, anchor);
			insert_dev(target, t2, anchor);
			insert_dev(target, p0, anchor);
			append_dev(p0, t3);
			insert_dev(target, t4, anchor);
			mount_component(example1, target, anchor);
			insert_dev(target, t5, anchor);
			insert_dev(target, hr1, anchor);
			insert_dev(target, t6, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t7);
			insert_dev(target, t8, anchor);
			mount_component(example2, target, anchor);
			insert_dev(target, t9, anchor);
			insert_dev(target, hr2, anchor);
			insert_dev(target, t10, anchor);
			insert_dev(target, p2, anchor);
			append_dev(p2, t11);
			insert_dev(target, t12, anchor);
			mount_component(example3, target, anchor);
			insert_dev(target, t13, anchor);
			mount_component(jsdoc_1, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const example0_changes = {};

			if (dirty & /*$$scope, counter*/ 10) {
				example0_changes.$$scope = { dirty, ctx };
			}

			example0.$set(example0_changes);
			const example1_changes = {};

			if (dirty & /*$$scope*/ 8) {
				example1_changes.$$scope = { dirty, ctx };
			}

			example1.$set(example1_changes);
			const example2_changes = {};

			if (dirty & /*$$scope*/ 8) {
				example2_changes.$$scope = { dirty, ctx };
			}

			example2.$set(example2_changes);
			const example3_changes = {};

			if (dirty & /*$$scope*/ 8) {
				example3_changes.$$scope = { dirty, ctx };
			}

			example3.$set(example3_changes);
			const jsdoc_1_changes = {};
			if (dirty & /*jsdoc*/ 1) jsdoc_1_changes.jsdoc = /*jsdoc*/ ctx[0];
			jsdoc_1.$set(jsdoc_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(docheader.$$.fragment, local);
			transition_in(example0.$$.fragment, local);
			transition_in(example1.$$.fragment, local);
			transition_in(example2.$$.fragment, local);
			transition_in(example3.$$.fragment, local);
			transition_in(jsdoc_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(docheader.$$.fragment, local);
			transition_out(example0.$$.fragment, local);
			transition_out(example1.$$.fragment, local);
			transition_out(example2.$$.fragment, local);
			transition_out(example3.$$.fragment, local);
			transition_out(jsdoc_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(docheader, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(example0, detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(hr0);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t4);
			destroy_component(example1, detaching);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(hr1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t8);
			destroy_component(example2, detaching);
			if (detaching) detach_dev(t9);
			if (detaching) detach_dev(hr2);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(p2);
			if (detaching) detach_dev(t12);
			destroy_component(example3, detaching);
			if (detaching) detach_dev(t13);
			destroy_component(jsdoc_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const res = await this.fetch(`components/button.json`);
	const jsdoc = await res.json();
	return { jsdoc };
}

function instance($$self, $$props, $$invalidate) {
	let { jsdoc } = $$props;
	let counter = 0;
	const writable_props = ["jsdoc"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Button> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(1, counter++, counter);

	$$self.$set = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
	};

	$$self.$capture_state = () => {
		return { jsdoc, counter };
	};

	$$self.$inject_state = $$props => {
		if ("jsdoc" in $$props) $$invalidate(0, jsdoc = $$props.jsdoc);
		if ("counter" in $$props) $$invalidate(1, counter = $$props.counter);
	};

	return [jsdoc, counter, click_handler];
}

class Button_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { jsdoc: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*jsdoc*/ ctx[0] === undefined && !("jsdoc" in props)) {
			console.warn("<Button> was created without expected prop 'jsdoc'");
		}
	}

	get jsdoc() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsdoc(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Button_1;
export { preload };
