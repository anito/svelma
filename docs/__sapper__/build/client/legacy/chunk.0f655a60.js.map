{"version":3,"file":"chunk.0f655a60.js","sources":["../../../../node_modules/lz-string/libs/lz-string.js","../../../../node_modules/codesandbox-import-utils/lib/api/define.js","../../../../src/components/CodepenButton.svelte","../../../../src/components/Example.svelte"],"sourcesContent":["// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LZString = require(\"lz-string\");\nfunction compress(input) {\n    return LZString.compressToBase64(input)\n        .replace(/\\+/g, \"-\") // Convert '+' to '-'\n        .replace(/\\//g, \"_\") // Convert '/' to '_'\n        .replace(/=+$/, \"\"); // Remove ending '='\n}\nfunction getParameters(parameters) {\n    return compress(JSON.stringify(parameters));\n}\nexports.getParameters = getParameters;\n//# sourceMappingURL=define.js.map","<script>\n  import { getParameters } from 'codesandbox/lib/api/define'\n\n  export let title = 'Svelma Example'\n  export let code\n\n  let form\n\n  function extractTag(code, tag) {\n    let start = code.indexOf(`<${tag}>`)\n    if (start === -1) return\n\n    start = start + tag.length + 2\n    const end = code.lastIndexOf(`<\\/${tag}>`)\n\n    const extracted = code.substring(start, end)\n\n    return extracted\n  }\n\n  function extractHTML(code) {\n    code = code.replace(/<script>[\\s\\S]*<\\/script>/im, '')\n    code = code.replace(/<script>[\\s\\S]*<\\/style>/im, '')\n\n    return code\n  }\n\n  $: value = getParameters({\n    files: {\n      'sandbox.config.json': {\n        content: {\n          template: 'svelte',\n        },\n      },\n      'index.html': {\n        content: `<html>\n  <body>\n    <link\n      id=\"external-css\"\n      rel=\"stylesheet\"\n      type=\"text/css\"\n      href=\"https://unpkg.com/bulma/css/bulma.min.css\"\n      media=\"all\"\n    />\n    <link\n      id=\"external-css2\"\n      rel=\"stylesheet\"\n      type=\"text/css\"\n      href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\"\n      media=\"all\"\n    />\n  </body>\n</html>`,\n      },\n      'index.js': {\n        content: `import App from \"./App.svelte\";\n\nconst app = new App({\n  target: document.body\n});\n\nexport default app;`,\n      },\n      'App.svelte': { content: code },\n      'package.json': {\n        content: {\n          name: 'svelma-example',\n          version: '1.0.0',\n          devDependencies: {\n            'npm-run-all': '^4.1.5',\n            rollup: '^1.10.1',\n            'rollup-plugin-commonjs': '^9.3.4',\n            'rollup-plugin-node-resolve': '^4.2.3',\n            'rollup-plugin-svelte': '^5.0.3',\n            'rollup-plugin-terser': '^4.0.4',\n            'sirv-cli': '^0.3.1',\n          },\n          dependencies: {\n            svelte: '^3.4.4',\n            svelma: 'latest',\n            '@fortawesome/fontawesome-free': 'latest',\n            bulma: 'latest',\n          },\n          scripts: {\n            build: 'rollup -c',\n            autobuild: 'rollup -c -w',\n            dev: 'run-p start:dev autobuild',\n            start: 'sirv public',\n            'start:dev': 'sirv public --dev',\n          },\n        },\n      },\n    },\n  })\n\n  function open() {\n    form.submit()\n  }\n</script>\n\n<style>\n  .slot-wrap {\n    cursor: pointer;\n    pointer-events: auto;\n  }\n</style>\n\n<form action=\"https://codesandbox.io/api/v1/sandboxes/define\" method=\"POST\" target=\"_blank\" bind:this={form}>\n  <input type=\"hidden\" name=\"parameters\" {value} />\n  <div class=\"slot-wrap\" on:click={open}>\n    <slot />\n  </div>\n</form>\n","<script>\n  import { onMount } from 'svelte'\n  import { Button } from 'svelma'\n  import Code from './Code.svelte'\n  import CodepenButton from './CodepenButton.svelte'\n\n  export let lang = 'xml'\n  export let code\n  export let horizontal = false\n\n  let showCode = false\n\n  function show() {\n    showCode = true\n  }\n\n  function hide(e) {\n    e.stopPropagation()\n    showCode = false\n  }\n</script>\n\n<style lang=\"scss\">\n  .snippet {\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: stretch;\n    border-radius: 6px;\n    border-top-left-radius: 0;\n    border: 2px solid #f5f5f5;\n    flex-direction: row;\n    margin-top: 3em;\n\n    &.horizontal {\n      flex-direction: column;\n    }\n  }\n\n  @media screen and (max-width: 1087px) {\n    .snippet {\n      flex-direction: column;\n    }\n  }\n\n  .preview {\n    min-width: 50%;\n    padding: 1.5rem;\n  }\n\n  .code {\n    min-width: 50%;\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    border-radius: 0 6px 6px 0;\n    border-left: 1px solid #f5f5f5;\n    overflow: hidden;\n    position: relative;\n    /* cursor: pointer;\n    pointer-events: auto; */\n\n    /*\n    &::before {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      opacity: 0.8;\n      background-color: white;\n      content: '<> Show Code';\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 1;\n      font-size: 0.75rem;\n    }*/\n\n    /*\n    &:hover::before {\n      background-color: #ffdd57;\n    }\n\n    & :global(pre),\n    & :global(pre code) {\n      overflow: hidden;\n    }\n\n    &.show-code {\n      cursor: auto;\n\n      &::before {\n        content: inherit;\n      }\n\n      & :global(figure) {\n        margin-bottom: 3em;\n      }\n\n      & :global(pre) {\n        overflow: auto;\n      }\n    }*/\n  }\n\n  .snippet::before {\n    background: #ffdd57;\n    border-radius: 2px 2px 0 0;\n    bottom: 100%;\n    color: rgba(0, 0, 0, 0.7);\n    content: 'Example';\n    display: inline-block;\n    font-size: 7px;\n    font-weight: 700;\n    left: -1px;\n    letter-spacing: 1px;\n    margin-left: -1px;\n    padding: 3px 5px;\n    position: absolute;\n    text-transform: uppercase;\n    vertical-align: top;\n  }\n\n  .snippet::before {\n    content: 'Snippet';\n    align-items: stretch;\n    display: flex;\n  }\n\n  .codepen-button {\n    position: absolute;\n    display: inline-flex;\n    background: #ffdd57;\n    border-radius: 4px 4px 0 0;\n    bottom: 100%;\n    font-size: 7px;\n    font-weight: 700;\n    right: -1px;\n    padding: 0 0 0 8px;\n    vertical-align: top;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    line-height: 17px;\n  }\n\n  /*.code {\n    :global(.codeview) {\n      height: 100%;\n\n      :global(figure) {\n        height: 100%;\n\n        :global(pre:not(.hidden)) {\n          height: 100%;\n        }\n      }\n    }\n  }*/\n\n  :global(.codeview) {\n    margin-bottom: 0 !important;\n  }\n\n  :global(.btn-show-code) {\n    align-self: center;\n    margin: 2em 0 0.5em;\n    position: absolute;\n    bottom: 0;\n    background: none;\n  }\n</style>\n\n<div class=\"snippet\" class:horizontal>\n  <CodepenButton {code}>\n    <div class=\"codepen-button\">\n      Codesandbox\n      <i class=\"icon is-small fas fa-external-link-alt\" />\n    </div>\n  </CodepenButton>\n  <div class=\"preview\">\n    <slot name=\"preview\" />\n  </div>\n  <div class=\"code\">\n    <!-- class:show-code={showCode} on:click={show} -->\n    <Code {lang} {code} />\n\n    <!-- {#if showCode}\n      <Button class=\"btn-show-code is-rounded is-outline has-text-grey-light\" on:click|stopPropagation={hide}>\n        Hide Code\n      </Button>\n    {/if} -->\n  </div>\n</div>\n"],"names":["LZString","f","String","fromCharCode","keyStrBase64","keyStrUriSafe","baseReverseDic","getBaseValue","alphabet","character","i","length","charAt","compressToBase64","input","res","_compress","a","decompressFromBase64","_decompress","index","compressToUTF16","decompressFromUTF16","compressed","charCodeAt","compressToUint8Array","uncompressed","compress","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","decompress","Array","result","forEach","c","push","join","compressToEncodedURIComponent","decompressFromEncodedURIComponent","replace","bitsPerChar","getCharFromInt","value","ii","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","Object","prototype","hasOwnProperty","call","Math","pow","resetValue","getNextValue","w","bits","resb","maxpower","power","dictionary","enlargeIn","dictSize","numBits","entry","data","val","position","module","commonjsHelpers.createCommonjsModule","open","form","title","code","getParameters","files","content","template","name","version","devDependencies","rollup","dependencies","svelte","svelma","bulma","scripts","build","autobuild","dev","start","submit","lang","horizontal"],"mappings":"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"}