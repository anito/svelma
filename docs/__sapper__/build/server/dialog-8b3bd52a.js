'use strict';

var __chunk_1 = require('./chunk-6a657c50.js');
var __chunk_2 = require('./chunk-32179e67.js');
var __chunk_3 = require('./chunk-64057023.js');
require('clipboard');
require('./chunk-e9912fa5.js');
var __chunk_5 = require('./chunk-b4c70e0c.js');
var __chunk_6 = require('./chunk-fa327f52.js');

/* src/routes/components/dialog.svelte generated by Svelte v3.9.1 */

async function preload() {
  const res = await this.fetch(`components/dialog.json`);
  const jsdoc = await res.json();

  return { jsdoc };
}

const Dialog_1 = __chunk_1.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

  let { jsdoc } = $$props;

	if ($$props.jsdoc === void 0 && $$bindings.jsdoc && jsdoc !== void 0) $$bindings.jsdoc(jsdoc);

	return `${__chunk_1.validate_component(__chunk_3.DocHeader, 'DocHeader').$$render($$result, {
		title: "Dialog",
		subtitle: "User alerts, promps, and confirmation dialogs"
	}, {}, {})}

	<p class="title is-4">Alert and Dialog</p>

	<p class="content">Use <code>Dialog.alert()</code> and <code>Dialog.confirm()</code> to create these kinds of dialogs.
	The methods return a promise that is resolved when the user cancels or confirms the alert. If the use closes/cancels the
	value will be <code>false</code>. If the user clicks the confirm button the value will be <code>true</code>.

	The first argument can either be an object of options or a string to use as the message.</p>

	${__chunk_1.validate_component(__chunk_5.Example, 'Example').$$render($$result, { code: `<script>
  import { Button, Dialog, Toast } from 'svelma'

  function alert() {
    Dialog.alert('Alles ist gut')
  }

  const thenHandler = result => Toast.create(\`You \${result ? 'confirmed' : 'canceled'}\`)

  function confirm(type) {
    switch(type) {
      case 'custom':
        return Dialog.confirm({
          message: 'This is a custom confirmation message',
          title: "I'm a title!",
          type: 'is-danger',
          icon: 'times-circle'
        })
        .then(thenHandler)
      default:
        Dialog.confirm('Shall we dance?')
        .then(thenHandler)
    }
  }
</script>

<Button type="is-primary" on:click={() => alert()}>Dialog</Button>
<Button type="is-info" on:click={() => confirm()}>Confirm</Button>
<Button type="is-danger" on:click={() => confirm('custom')}>Confirm (custom)</Button>
` }, {}, {
		default: () => `
	  `,
		preview: () => `<div slot="preview">
	    ${__chunk_1.validate_component(__chunk_2.Button, 'Button').$$render($$result, { type: "is-primary" }, {}, { default: () => `Dialog` })}
	    ${__chunk_1.validate_component(__chunk_2.Button, 'Button').$$render($$result, { type: "is-info" }, {}, { default: () => `Confirm` })}
	    ${__chunk_1.validate_component(__chunk_2.Button, 'Button').$$render($$result, { type: "is-danger" }, {}, { default: () => `Confirm (custom)` })}
	  </div>
	`
	})}

	<hr class="is-medium">

	<p class="title is-4">Prompt</p>

	<p class="content">Use <code>Dialog.prompt()</code> to programmatically create prompts for user input. By default the
	dialog will be created with a required text input. You can control the props (attributes) on the prompt with the
	<code>inputProps</code> prop.

	<code>prompt()</code> returns a promise that will be resolved with the prompt input value if the user confirms, or null
	if they cancel/close.</p>

	${__chunk_1.validate_component(__chunk_5.Example, 'Example').$$render($$result, { code: `<script>
  import { Button, Dialog, Toast } from 'svelma'

  function prompt(opts) {
    Dialog.prompt({
      message: "What is your quest?",
      ...opts
    })
    .then(prompt => Toast.create(\`Your answer was: '\${prompt}'\`))
  }
</script>

<Button type="is-primary" on:click={() => prompt()}>Prompt</Button>
<Button type="is-link" on:click={() => prompt({ message: 'Which date?', inputProps: { type: 'date' }})}>Date Prompt</Button>` }, {}, {
		default: () => `
	  `,
		preview: () => `<div slot="preview">
	    ${__chunk_1.validate_component(__chunk_2.Button, 'Button').$$render($$result, { type: "is-primary" }, {}, { default: () => `Prompt` })}
	    ${__chunk_1.validate_component(__chunk_2.Button, 'Button').$$render($$result, { type: "is-link" }, {}, { default: () => `Date Prompt` })}
	  </div>
	`
	})}

	${__chunk_1.validate_component(__chunk_6.JSDoc, 'JSDoc').$$render($$result, { jsdoc: jsdoc }, {}, {})}`;
});

exports.default = Dialog_1;
exports.preload = preload;
//# sourceMappingURL=dialog-8b3bd52a.js.map
